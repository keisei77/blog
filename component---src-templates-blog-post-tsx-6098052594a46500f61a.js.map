{"version":3,"sources":["webpack:///./src/components/progressBar.tsx","webpack:///./src/templates/blog-post.tsx","webpack:///./src/components/tag.tsx"],"names":["StyledProgressBar","styled","progress","ProgressBar","progressRef","useRef","scrollHandler","useCallback","event","postEl","document","querySelector","current","postElRectInfo","getBoundingClientRect","value","Math","floor","abs","top","height","window","innerHeight","setAttribute","toString","useEffect","addEventListener","removeEventListener","ref","id","max","BlogPostTemplate","props","post","data","markdownRemark","site","siteMetadata","title","pageContext","tags","slug","previous","next","frontmatter","description","excerpt","style","marginBottom","display","date","dangerouslySetInnerHTML","__html","html","flexWrap","justifyContent","listStyle","padding","flexBasis","textAlign","to","fields","rel","pageQuery","StyledLink","Link","StyledPre","pre","tagsLength","showBorder","StyledLabel","label","showLabel","Tag","sort","a","b","labelA","labelB","toLowerCase","length","map","tag","count","key"],"mappings":"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","file":"component---src-templates-blog-post-tsx-6098052594a46500f61a.js","sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React, { useEffect, useRef, useCallback } from 'react';\nimport styled from 'styled-components';\n\nconst StyledProgressBar = styled.progress`\n  --progress-width: 100%;\n  --progress-height: 4px;\n  --progress-bar-color: #fcf798;\n  --progress-bg: none;\n\n  position: fixed;\n  width: 100%;\n  left: 0;\n  z-index: 9999;\n  right: 0;\n\n  &:not([value]) {\n    height: 0;\n  }\n\n  &[value] {\n    /* Reset the default appearance */\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    appearance: none;\n\n    /* Get rid of default border in Firefox. */\n    border: none;\n\n    width: var(--progress-width);\n    height: var(--progress-height);\n\n    /* Firefox: any style applied here applies to the container. */\n    background-color: var(--progress-bg);\n\n    /* For IE10 */\n    color: var(--progress-bar-color);\n  }\n\n  &[value]::-moz-progress-bar {\n    background-color: var(--progress-bar-color);\n  }\n\n  /* WebKit/Blink browsers:\n    -webkit-progress-bar is to style the container */\n  &[value]::-webkit-progress-bar {\n    background-color: var(--progress-bg);\n  }\n\n  /*-webkit-progress-value is to style the progress bar.*/\n  &[value]::-webkit-progress-value {\n    background-color: var(--progress-bar-color);\n  }\n`;\n\nconst ProgressBar = () => {\n  const progressRef = useRef<HTMLProgressElement>(null);\n  const scrollHandler = useCallback(\n    (event: Event) => {\n      const postEl = document.querySelector('main');\n      if (postEl && progressRef.current) {\n        const postElRectInfo = postEl.getBoundingClientRect();\n        const value = Math.floor(\n          Math.abs(\n            postElRectInfo.top / (postElRectInfo.height - window.innerHeight)\n          ) * 100\n        );\n        progressRef.current.setAttribute('value', value.toString());\n      }\n    },\n    [progressRef]\n  );\n  useEffect(() => {\n    window.addEventListener('scroll', scrollHandler);\n    return () => {\n      window.removeEventListener('scroll', scrollHandler);\n    };\n  }, [scrollHandler]);\n  return <StyledProgressBar ref={progressRef} id=\"post\" max=\"100\" />;\n};\n\nexport default ProgressBar;\n","import React from 'react';\nimport { Link, graphql } from 'gatsby';\n\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\nimport Tag from '../components/tag';\nimport ProgressBar from '../components/progressBar';\n\nconst BlogPostTemplate = (props: any) => {\n  const post = props.data.markdownRemark;\n  const siteTitle = props.data.site.siteMetadata.title;\n  const { slug, tags, previous, next } = props.pageContext;\n  return (\n    <Layout>\n      <>\n        <ProgressBar />\n        <SEO\n          title={post.frontmatter.title}\n          description={post.frontmatter.description || post.excerpt}\n        />\n        <article>\n          <header>\n            <h1\n              style={{\n                marginBottom: 0,\n              }}\n            >\n              {post.frontmatter.title}\n            </h1>\n            <p\n              style={{\n                display: `block`,\n              }}\n            >\n              {post.frontmatter.date}\n            </p>\n          </header>\n          <section dangerouslySetInnerHTML={{ __html: post.html }} />\n          <footer>\n            <Tag tags={tags} />\n          </footer>\n        </article>\n\n        <nav>\n          <ul\n            style={{\n              display: `flex`,\n              flexWrap: `wrap`,\n              justifyContent: `space-between`,\n              listStyle: `none`,\n              padding: 0,\n            }}\n          >\n            <li\n              style={{\n                flexBasis: '50%',\n                textAlign: 'left',\n              }}\n            >\n              {previous && (\n                <Link to={previous.fields.slug} rel=\"prev\">\n                  ← {previous.frontmatter.title}\n                </Link>\n              )}\n            </li>\n            <li\n              style={{\n                flexBasis: '50%',\n                textAlign: 'right',\n              }}\n            >\n              {next && (\n                <Link to={next.fields.slug} rel=\"next\">\n                  {next.frontmatter.title} →\n                </Link>\n              )}\n            </li>\n          </ul>\n        </nav>\n      </>\n    </Layout>\n  );\n};\n\nexport default BlogPostTemplate;\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\n\nconst StyledLink = styled(Link)`\n  text-align: center;\n  color: #fff;\n  margin-right: 0.5rem;\n  padding: 0.25rem 0.5rem;\n  display: inline-block;\n  border-radius: 0.875rem;\n  height: 1rem;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  line-height: 1rem;\n  transition: opacity 0.1s ease-in-out;\n  background: #74d2ff;\n  margin-top: 0.5rem;\n  &:hover {\n    opacity: 0.85;\n  }\n`;\n\nconst StyledPre = styled.pre<{ tagsLength: number; showBorder: boolean }>`\n  display: ${props => (props.tagsLength ? 'flex' : 'none')};\n  align-items: center;\n  flex-wrap: wrap;\n  border-top: ${props => (props.showBorder ? '1px solid #74d2ff' : 'none')};\n  padding-top: 0.5rem;\n`;\n\nconst StyledLabel = styled.label<{ showLabel: boolean }>`\n  margin-top: 0.5rem;\n  display: ${props => (props.showLabel ? 'flex' : 'none')};\n`;\n\ninterface TagWrapper {\n  label: string;\n  count: number;\n}\n\ninterface TagProps {\n  tags: TagWrapper[] | string[];\n  style?: {\n    showBorder: boolean;\n    showLabel: boolean;\n  };\n}\n\nconst Tag = (props: TagProps) => {\n  const { style = { showBorder: true, showLabel: true }, tags = [] } = props;\n  (tags as any).sort((a: TagWrapper | string, b: TagWrapper | string) => {\n    let labelA = null;\n    let labelB = null;\n    if (typeof a === 'string' && typeof b === 'string') {\n      labelA = a;\n      labelB = b;\n    } else {\n      labelA = (a as TagWrapper).label;\n      labelB = (b as TagWrapper).label;\n    }\n\n    return labelA.toLowerCase() < labelB.toLowerCase() && -1;\n  });\n  return (\n    <StyledPre showBorder={style.showBorder} tagsLength={tags.length}>\n      <StyledLabel showLabel={style.showLabel}>标签：</StyledLabel>\n      {(tags as any).map((tag: TagWrapper | string) => {\n        let label = null;\n        let count = null;\n        if (typeof tag === 'string') {\n          label = tag;\n        } else {\n          label = tag.label;\n          count = tag.count;\n        }\n\n        return (\n          <StyledLink key={label} to={`/tags/${label}`}>\n            {label}\n            {count && ` (${count})`}\n          </StyledLink>\n        );\n      })}\n    </StyledPre>\n  );\n};\n\nexport default Tag;\n"],"sourceRoot":""}