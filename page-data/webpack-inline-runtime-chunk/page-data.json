{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/webpack-inline-runtime-chunk/","result":{"data":{"site":{"siteMetadata":{"title":"学习随笔"}},"markdownRemark":{"id":"3e52413b-34ea-5632-a843-d8c80b3e3a77","excerpt":"背景 最近在公司做移动端项目优化的工作，目前主要的重心放在了打包体积优化上。目前项目中采用了 webpack 4，实际上已经为我们提供了诸多方便的配置能力进行打包优化。 抽离 webpack 运行时代码 将 optimization.runtimeChunk 设置为 true 或 ‘multiple…","html":"<h3>背景</h3>\n<p>最近在公司做移动端项目优化的工作，目前主要的重心放在了打包体积优化上。目前项目中采用了 webpack 4，实际上已经为我们提供了诸多方便的配置能力进行打包优化。</p>\n<h3>抽离 webpack 运行时代码</h3>\n<p>将 optimization.runtimeChunk 设置为 true 或 ‘multiple’，会为每个只含有 runtime 的入口添加一个额外 chunk。此配置的别名如下：</p>\n<h4>webpack.config.js</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//...</span>\n  optimization<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    runtimeChunk<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function-variable function\">name</span><span class=\"token operator\">:</span> <span class=\"token parameter\">entrypoint</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">runtime~</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>entrypoint<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>值 “single” 会创建一个在所有生成 chunk 之间共享的运行时文件。此设置是如下设置的别名：</p>\n<h4>webpack.config.js</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//...</span>\n  optimization<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    runtimeChunk<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">'runtime'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>通过将 optimization.runtimeChunk 设置为 object，对象中可以设置只有 name 属性，其中属性值可以是名称或者返回名称的函数， 用于为 runtime chunks 命名。</p>\n<p>默认值是 false：每个入口 chunk 中直接嵌入 runtime。</p>\n<h3>内联</h3>\n<p>将运行时代码剥离的优势是，不需要在每个 chunk 中都打包运行时代码。结合 <code class=\"language-text\">HtmlWebpackPlugin</code> 的 chunks 属性可以将 runtimeChunk 以 script 标签的形式引入，不过会多发一次请求，更推荐的做法是将 runtimeChunk 打包至 index.html 中。</p>\n<p><code class=\"language-text\">create-react-app</code> 中的子包 <a href=\"https://github.com/facebook/create-react-app/tree/master/packages/react-dev-utils\"><code class=\"language-text\">react-dev-utils</code></a> 中提供了一些 webpack 插件，其中 <a href=\"https://github.com/facebook/create-react-app/blob/master/packages/react-dev-utils/InlineChunkHtmlPlugin.js\"><code class=\"language-text\">InlineChunkHtmlPlugin</code></a> 就可以满足上述的需求：</p>\n<h4>webpack.config.js</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> HtmlWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> InlineChunkHtmlPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react-dev-utils/InlineChunkHtmlPlugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// webpack config</span>\n<span class=\"token keyword\">var</span> publicUrl <span class=\"token operator\">=</span> <span class=\"token string\">'/my-custom-url'</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  output<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    publicPath<span class=\"token operator\">:</span> publicUrl <span class=\"token operator\">+</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token comment\">// Generates an `index.html` file with the &lt;script> injected.</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      inject<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      template<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'public/index.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// Inlines chunks with `runtime` in the name</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">InlineChunkHtmlPlugin</span><span class=\"token punctuation\">(</span>HtmlWebpackPlugin<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token regex\">/runtime/</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>注意: HtmlWebpackPlugin 和 InlineChunkHtmlPlugin 需要串联使用，并且需要 HtmlWebpackPlugin >= 4.x 版本。</p>\n</blockquote>","frontmatter":{"title":"webpack 内联 runtimeChunk 至index.html","date":"October 13, 2020","description":"将 webpack 运行时代码抽到单独的文件，并内嵌至 index.html 中"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"tags":["webpack"],"slug":"/webpack-inline-runtime-chunk/","previous":null,"next":{"excerpt":"引言 作为前端工程师经常打交道的开发工具无非 IDE 编辑器 和 Chrome，在 Chrome 中调试是非常方便的，直接在 开发者工具的  栏打断点就可以了。那么，如果遇到需要写 node 相关的代码，比如 webpack 配置项，应该怎么调试来实现我们的需求呢？ VS…","fields":{"slug":"/easy-debug-in-node/"},"frontmatter":{"date":"September 14, 2020","description":"本文将介绍 VS Code 调试 node.js 的小技巧。","title":"vscode 调试 node.js","tags":["debug"]}}}}}