{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/react-transition-group/","result":{"data":{"site":{"siteMetadata":{"title":"学习随笔"}},"markdownRemark":{"id":"8e327f27-d486-54c8-8185-79fbc411dd68","excerpt":"前言 笔者最近在做移动端的项目，项目经理某天给我发了一个链接panel-stack，我试用了一下感觉蛮不错的，每层（stack）切换时非常丝滑。在我们的项目中，针对路由做了一层包装，当用户点击链接时，我们会在 dom 上 append…","html":"<h3>前言</h3>\n<p>笔者最近在做移动端的项目，项目经理某天给我发了一个链接<a href=\"https://blueprintjs.com/docs/#core/components/panel-stack\">panel-stack</a>，我试用了一下感觉蛮不错的，每层（stack）切换时非常丝滑。在我们的项目中，针对路由做了一层包装，当用户点击链接时，我们会在 dom 上 append 该链接指向页面的节点，而原页面的节点不会被销毁。这样做的好处是，可以记住原页面的滚动位置、交互状态，但不好的地方是用户刷新页面时只会记录最近一个链接，这样之前页面的元素就丢失了。</p>\n<p>简单的路由实现：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> layers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">routerHandler</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  layers<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    state<span class=\"token punctuation\">:</span> event<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">,</span>\n    path<span class=\"token punctuation\">:</span> location<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">,</span>\n    query<span class=\"token punctuation\">:</span> location<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'popstate'</span><span class=\"token punctuation\">,</span> routeHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> RouterWrapper <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">memo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> layers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">layer<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>LayerWrapper layer<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>layer<span class=\"token punctuation\">}</span> key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>根据上面的路由和 layer 的关系，我们就可以构造出 panel stack 依赖的 <code class=\"language-text\">stack: { component: React.ComponentTypeundefined title: string }[]</code>数据结构了。\n再结合 header，那么大体上我们就满足了需求。</p>\n<h3>搬运</h3>\n<p>了解 panel stack 的用法，那么其实现是怎样的呢？</p>\n<p>我们来看一下 <a href=\"https://github.com/palantir/blueprint/blob/7bb4548b1241d1ac4f5a97a07b57f23b8d8afed2/packages/core/src/components/panel-stack/panelStack.tsx#L79\">PanelStack</a> 的代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">public</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> classes <span class=\"token operator\">=</span> <span class=\"token function\">classNames</span><span class=\"token punctuation\">(</span>\n    Classes<span class=\"token punctuation\">.</span><span class=\"token constant\">PANEL_STACK</span><span class=\"token punctuation\">,</span>\n    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Classes<span class=\"token punctuation\">.</span><span class=\"token constant\">PANEL_STACK</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>direction<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>className<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>TransitionGroup className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>classes<span class=\"token punctuation\">}</span> component<span class=\"token operator\">=</span><span class=\"token string\">\"div\"</span><span class=\"token operator\">></span>\n     <span class=\"token operator\">&lt;</span>CSSTransition\n        key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">}</span>\n        timeout<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">500</span><span class=\"token punctuation\">}</span>\n        classNames<span class=\"token operator\">=</span><span class=\"token string\">\"item\"</span>\n      <span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">renderPanels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>CSSTransition<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>TransitionGroup<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>由 render()方法可以看到，其底层实际还是依赖了三方库：<a href=\"https://github.com/reactjs/react-transition-group\">react-transition-group</a>。</p>\n<p>虽然 <code class=\"language-text\">react-transition-group</code> 提供了过渡的能力，即提供了 dom 元素进入退出的多个周期节点。为了丝滑的体验，需要对每个时间节点设定样式，这样不免会写出很多的重复或相似的 css 代码。而 panel-stack 封装了<a href=\"https://github.com/palantir/blueprint/blob/7bb4548b1241d1ac4f5a97a07b57f23b8d8afed2/packages/core/src/common/_react-transition.scss\">scss 的过渡函数</a>，非常的强大：</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token keyword\">@mixin</span> <span class=\"token function\">react-transition</span><span class=\"token punctuation\">(</span>\n  <span class=\"token variable\">$name</span><span class=\"token punctuation\">,</span>\n  <span class=\"token variable\">$properties</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\"><span class=\"token variable\">$duration</span></span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$pt-transition-duration</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\"><span class=\"token variable\">$easing</span></span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$pt-transition-ease</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\"><span class=\"token variable\">$delay</span></span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">,</span>\n  <span class=\"token property\"><span class=\"token variable\">$before</span></span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\"><span class=\"token variable\">$after</span></span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">@include</span> <span class=\"token function\">each-prop</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$properties</span><span class=\"token punctuation\">,</span> 2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">@include</span> <span class=\"token function\">react-transition-phase</span><span class=\"token punctuation\">(</span>\n    <span class=\"token variable\">$name</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'enter'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token variable\">$properties</span><span class=\"token punctuation\">,</span>\n    <span class=\"token variable\">$duration</span><span class=\"token punctuation\">,</span>\n    <span class=\"token variable\">$easing</span><span class=\"token punctuation\">,</span>\n    <span class=\"token variable\">$delay</span><span class=\"token punctuation\">,</span>\n    <span class=\"token variable\">$before</span><span class=\"token punctuation\">,</span>\n    <span class=\"token variable\">$after</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">@include</span> <span class=\"token function\">react-transition-phase</span><span class=\"token punctuation\">(</span>\n    <span class=\"token variable\">$name</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'exit'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token variable\">$properties</span><span class=\"token punctuation\">,</span>\n    <span class=\"token variable\">$duration</span><span class=\"token punctuation\">,</span>\n    <span class=\"token variable\">$easing</span><span class=\"token punctuation\">,</span>\n    <span class=\"token variable\">$delay</span><span class=\"token punctuation\">,</span>\n    <span class=\"token variable\">$before</span><span class=\"token punctuation\">,</span>\n    <span class=\"token variable\">$after</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>大概就是根据节点进入/退出，通过函数调用来生成最终 css 代码。由于我们项目使用了 less 预处理样式，所以经过几番查阅文档将 scss 转成了 less 的实现：</p>\n<div class=\"gatsby-highlight\" data-language=\"less\"><pre class=\"language-less\"><code class=\"language-less\"><span class=\"token selector\">.each-prop(<span class=\"token variable\">@properties</span>, <span class=\"token variable\">@idx</span>)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">each</span><span class=\"token punctuation\">(</span><span class=\"token atrule\">@properties,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">@{key}</span><span class=\"token punctuation\">:</span> <span class=\"token function\">extract</span><span class=\"token punctuation\">(</span><span class=\"token variable\">@value</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">@idx</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.extract-prop(<span class=\"token variable\">@properties</span>)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">each</span><span class=\"token punctuation\">(</span><span class=\"token atrule\">@properties,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">transition-property+</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">@key</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.react-transition-phase(<span class=\"token variable\">@name</span>, <span class=\"token variable\">@phase</span>, <span class=\"token variable\">@properties</span>, <span class=\"token variable\">@duration</span>, <span class=\"token variable\">@easing</span>)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token variable\">@start-index<span class=\"token punctuation\">:</span></span> <span class=\"token function\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">@phase</span> = <span class=\"token string\">'enter'</span><span class=\"token punctuation\">,</span> 1<span class=\"token punctuation\">,</span> 2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token variable\">@end-index<span class=\"token punctuation\">:</span></span> <span class=\"token function\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">@phase</span> = <span class=\"token string\">'enter'</span><span class=\"token punctuation\">,</span> 2<span class=\"token punctuation\">,</span> 1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token atrule\">@class<span class=\"token punctuation\">:</span> ~\".@</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">-</span>@<span class=\"token punctuation\">{</span>phase<span class=\"token punctuation\">}</span>\"<span class=\"token punctuation\">;</span>\n  <span class=\"token atrule\">@class-active<span class=\"token punctuation\">:</span> ~\".@</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">-</span>@<span class=\"token punctuation\">{</span>phase<span class=\"token punctuation\">}</span><span class=\"token operator\">-</span>active\"<span class=\"token punctuation\">;</span>\n\n  <span class=\"token selector\">@{class}</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token mixin-usage function\">.each-prop</span><span class=\"token punctuation\">(</span><span class=\"token variable\">@properties</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">@start-index</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token selector\">@{class-active}</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token mixin-usage function\">.each-prop</span><span class=\"token punctuation\">(</span><span class=\"token variable\">@properties</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">@end-index</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token mixin-usage function\">.extract-prop</span><span class=\"token punctuation\">(</span><span class=\"token variable\">@properties</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">transition-duration</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">@duration</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">transition-timing-function</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">@easing</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这样在使用时，可以减少许多冗余的代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"less\"><pre class=\"language-less\"><code class=\"language-less\"><span class=\"token selector\">.layer-list</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 这里为节点新增时</span>\n  <span class=\"token selector\">&amp;.layer-list-push</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token selector\">.react-transition-phase(\n      'layer-item',\n      'enter',</span>\n      <span class=\"token punctuation\">{</span><span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translateX</span><span class=\"token punctuation\">(</span>100%<span class=\"token punctuation\">)</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>0%<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 0 1<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      0.4s<span class=\"token punctuation\">,</span>\n      ease\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token selector\">.react-transition-phase(\n      'layer-item',\n      'exit',</span>\n      <span class=\"token punctuation\">{</span><span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translateX</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>50%<span class=\"token punctuation\">)</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>0%<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 0 1<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      0.4s<span class=\"token punctuation\">,</span>\n      ease\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 这里为节点删除时</span>\n  <span class=\"token selector\">&amp;.layer-list-pop</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token selector\">.react-transition-phase(\n      'layer-item',\n      'enter',</span>\n      <span class=\"token punctuation\">{</span><span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translateX</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>50%<span class=\"token punctuation\">)</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>0%<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 0 1<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      0.4s<span class=\"token punctuation\">,</span>\n      ease\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token selector\">.react-transition-phase(\n      'layer-item',\n      'exit',</span>\n      <span class=\"token punctuation\">{</span><span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translateX</span><span class=\"token punctuation\">(</span>100%<span class=\"token punctuation\">)</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 0 1<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      0.4s<span class=\"token punctuation\">,</span>\n      ease\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>探究</h3>\n<p>现在我们就来追根溯源，来看一下 <code class=\"language-text\">react-transition-group</code> 的内部实现：</p>\n<p><a href=\"https://github.com/reactjs/react-transition-group/blob/master/src/Transition.js\">Transition.js</a>中说明， <code class=\"language-text\">Transition</code> 组件默认不会修改内部组件的行为，它只会记录组件的“进入”和“退出”的状态。</p>\n<p><code class=\"language-text\">Transition</code> 存在四种过渡状态：</p>\n<ul>\n<li><code class=\"language-text\">&#39;entering&#39;</code></li>\n<li><code class=\"language-text\">&#39;entered&#39;</code></li>\n<li><code class=\"language-text\">&#39;exiting&#39;</code></li>\n<li><code class=\"language-text\">&#39;exited&#39;</code></li>\n</ul>\n<p><code class=\"language-text\">Transition</code> 通过 <code class=\"language-text\">in</code> 这个 prop 来决定组件的方向，即当 <code class=\"language-text\">in</code> 为 <code class=\"language-text\">true</code> 时，组件状态会开始变为 <code class=\"language-text\">&#39;enter&#39;</code>，然后会在间隔时间内变为 <code class=\"language-text\">&#39;entering&#39;</code> 状态，完成后会变为 <code class=\"language-text\">&#39;entered&#39;</code> 状态。当 <code class=\"language-text\">in</code> 为 <code class=\"language-text\">false</code> 时，组件会进行类似的行为，只不过从 <code class=\"language-text\">&#39;exiting&#39;</code> 过渡到 <code class=\"language-text\">&#39;exited&#39;</code>。</p>\n<p>在我们的需求中，我们需要用到 <code class=\"language-text\">&lt;TransitionGroup&gt;</code> 和 <code class=\"language-text\">&lt;CSSTransition&gt;</code> 组件，<code class=\"language-text\">&lt;TransitionGroup&gt;</code> 是用来维护一组子组件的进出状态的集合，它本身不会定义过渡效果。</p>\n<p><code class=\"language-text\">&lt;TransitionGroup&gt;</code> 中使用了<a href=\"https://github.com/reactjs/react-transition-group/blob/master/src/utils/ChildMapping.js\">childMapping.js</a> 中的 <code class=\"language-text\">getChildMappingundefined getInitialChildMappingundefined getNextChildMapping</code> 来决定各个子组件的进出状态。</p>\n<p>这里根据每个子组件的顺序，依次赋予 props 各个状态。这里用到了 <code class=\"language-text\">React.cloneElement()</code>，复制原组件并传入新的 props。</p>\n<p>在 <code class=\"language-text\">&lt;CSSTransition&gt;</code> 中，定义了</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function-variable function\">onEnter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">maybeNode<span class=\"token punctuation\">,</span> maybeAppearing</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">,</span> appearing<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolveArguments</span><span class=\"token punctuation\">(</span>maybeNode<span class=\"token punctuation\">,</span> maybeAppearing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeClasses</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token string\">'exit'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addClass</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> appearing <span class=\"token operator\">?</span> <span class=\"token string\">'appear'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'enter'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'base'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>onEnter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onEnter</span><span class=\"token punctuation\">(</span>maybeNode<span class=\"token punctuation\">,</span> maybeAppearing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Transition</span></span>\n  <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">props</span><span class=\"token punctuation\">}</span></span>\n  <span class=\"token attr-name\">onEnter</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onEnter<span class=\"token punctuation\">}</span></span>\n  <span class=\"token attr-name\">onEntered</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onEntered<span class=\"token punctuation\">}</span></span>\n  <span class=\"token attr-name\">onEntering</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onEntering<span class=\"token punctuation\">}</span></span>\n  <span class=\"token attr-name\">onExit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onExit<span class=\"token punctuation\">}</span></span>\n  <span class=\"token attr-name\">onExiting</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onExiting<span class=\"token punctuation\">}</span></span>\n  <span class=\"token attr-name\">onExited</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onExited<span class=\"token punctuation\">}</span></span>\n<span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这里以 <code class=\"language-text\">onEnter</code> 为例，当处于 <code class=\"language-text\">&#39;enter&#39;</code> 状态时，在组件上增加 <code class=\"language-text\">{prefix}-enter</code> 的 class。</p>\n<p>在 <code class=\"language-text\">&lt;Transition&gt;</code> 中，当 props 有变化时，会执行 <code class=\"language-text\">componentDidUpdate()</code> 周期函数：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> nextStatus <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevProps <span class=\"token operator\">!==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> status <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">!==</span> <span class=\"token constant\">ENTERING</span> <span class=\"token operator\">&amp;&amp;</span> status <span class=\"token operator\">!==</span> <span class=\"token constant\">ENTERED</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        nextStatus <span class=\"token operator\">=</span> <span class=\"token constant\">ENTERING</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">===</span> <span class=\"token constant\">ENTERING</span> <span class=\"token operator\">||</span> status <span class=\"token operator\">===</span> <span class=\"token constant\">ENTERED</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        nextStatus <span class=\"token operator\">=</span> <span class=\"token constant\">EXITING</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">updateStatus</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> nextStatus<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>该函数来确定当前组件应该进入的下一个状态是什么，并执行 <code class=\"language-text\">updateStatus()</code> 方法，该方法根据 <code class=\"language-text\">nextStatus</code> 来执行具体的逻辑：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">updateStatus</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mounting <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> nextStatus</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextStatus <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">cancelNextCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextStatus <span class=\"token operator\">===</span> <span class=\"token constant\">ENTERING</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">performEnter</span><span class=\"token punctuation\">(</span>mounting<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">performExit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>unmountOnExit <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token constant\">EXITED</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> status<span class=\"token punctuation\">:</span> <span class=\"token constant\">UNMOUNTED</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">performEnter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mounting</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> enter <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props\n  <span class=\"token keyword\">const</span> appearing <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>isMounting <span class=\"token punctuation\">:</span> mounting\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>maybeNode<span class=\"token punctuation\">,</span> maybeAppearing<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>nodeRef\n    <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span>appearing<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">findDOMNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> appearing<span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">const</span> timeouts <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTimeouts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> enterTimeout <span class=\"token operator\">=</span> appearing <span class=\"token operator\">?</span> timeouts<span class=\"token punctuation\">.</span>appear <span class=\"token punctuation\">:</span> timeouts<span class=\"token punctuation\">.</span>enter\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>mounting <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>enter<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> config<span class=\"token punctuation\">.</span>disabled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">safeSetState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> status<span class=\"token punctuation\">:</span> <span class=\"token constant\">ENTERED</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onEntered</span><span class=\"token punctuation\">(</span>maybeNode<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onEnter</span><span class=\"token punctuation\">(</span>maybeNode<span class=\"token punctuation\">,</span> maybeAppearing<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">safeSetState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> status<span class=\"token punctuation\">:</span> <span class=\"token constant\">ENTERING</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onEntering</span><span class=\"token punctuation\">(</span>maybeNode<span class=\"token punctuation\">,</span> maybeAppearing<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onTransitionEnd</span><span class=\"token punctuation\">(</span>enterTimeout<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">safeSetState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> status<span class=\"token punctuation\">:</span> <span class=\"token constant\">ENTERED</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onEntered</span><span class=\"token punctuation\">(</span>maybeNode<span class=\"token punctuation\">,</span> maybeAppearing<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>以 <code class=\"language-text\">performEnter()</code> 方法为例，根据状态执行我们在<code class=\"language-text\">&lt;CSSTransition&gt;</code>中传入的 <code class=\"language-text\">props.onEntered()</code>，或执行 <code class=\"language-text\">props.onEnter()</code> 并进一步执行 <code class=\"language-text\">props.onEntering()</code>。\n由此，我们可以完整得出 transition 的全部过程。</p>\n<h3>总结</h3>\n<p>从一个小需求出发，我们可以从类似的解决方案中收获非常多的知识和技巧。有时候完成一项工作只是基本要求，更重要的是它的原理和底层实现。这样在以后遇到更复杂的需求时，也能不乱阵脚，根据以往的经验来轻松应对。</p>","frontmatter":{"title":"React 过渡","date":"June 01, 2020","description":"通过研究 react-transition-group 库来了解react中如何实现丝滑的过渡效果"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"tags":["React","transition"],"slug":"/react-transition-group/","previous":null,"next":{"excerpt":"概述 插件架构宏观上来讲就是一种框架能够在确定的点上执行外部的代码，而不需要提前知道这部分代码的细节。 它既可以很简单，也可以很复杂。我们可以编写 webpack 插件，也可以开发 vs code…","fields":{"slug":"/plugin-mechanism/"},"frontmatter":{"date":"May 12, 2020","description":"前端工具如今基本都提供了插件机制，尤其以webpack著称，那么这种机制是如何实现的呢？","title":"前端插件机制的探索","tags":["plugin mechanism"]}}}}}