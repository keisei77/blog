{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/react-transition-group/","result":{"data":{"site":{"siteMetadata":{"title":"学习随笔"}},"markdownRemark":{"id":"8e327f27-d486-54c8-8185-79fbc411dd68","excerpt":"前言 笔者最近在做移动端的项目，项目经理某天给我发了一个链接panel-stack，我试用了一下感觉蛮不错的，每层（stack）切换时非常丝滑。在我们的项目中，针对路由做了一层包装，当用户点击链接时，我们会在 dom 上 append…","html":"<h3>前言</h3>\n<p>笔者最近在做移动端的项目，项目经理某天给我发了一个链接<a href=\"https://blueprintjs.com/docs/#core/components/panel-stack\">panel-stack</a>，我试用了一下感觉蛮不错的，每层（stack）切换时非常丝滑。在我们的项目中，针对路由做了一层包装，当用户点击链接时，我们会在 dom 上 append 该链接指向页面的节点，而原页面的节点不会被销毁。这样做的好处是，可以记住原页面的滚动位置、交互状态，但不好的地方是用户刷新页面时只会记录最近一个链接，这样之前页面的元素就丢失了。</p>\n<p>简单的路由实现：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> layers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">routerHandler</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  layers<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    state<span class=\"token punctuation\">:</span> event<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">,</span>\n    path<span class=\"token punctuation\">:</span> location<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">,</span>\n    query<span class=\"token punctuation\">:</span> location<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'popstate'</span><span class=\"token punctuation\">,</span> routeHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> RouterWrapper <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">memo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> layers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">layer<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>LayerWrapper layer<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>layer<span class=\"token punctuation\">}</span> key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>根据上面的路由和 layer 的关系，我们就可以构造出 panel stack 依赖的 <code class=\"language-text\">stack: { component: React.ComponentTypeundefined title: string }[]</code>数据结构了。\n再结合 header，那么大体上我们就满足了需求。</p>\n<h3>探究</h3>\n<p>了解 panel stack 的用法，那么其实现是怎样的呢？</p>\n<p>我们来看一下 <a href=\"https://github.com/palantir/blueprint/blob/7bb4548b1241d1ac4f5a97a07b57f23b8d8afed2/packages/core/src/components/panel-stack/panelStack.tsx#L79\">PanelStack</a> 的代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">public</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> classes <span class=\"token operator\">=</span> <span class=\"token function\">classNames</span><span class=\"token punctuation\">(</span>\n    Classes<span class=\"token punctuation\">.</span><span class=\"token constant\">PANEL_STACK</span><span class=\"token punctuation\">,</span>\n    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Classes<span class=\"token punctuation\">.</span><span class=\"token constant\">PANEL_STACK</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>direction<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>className<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>TransitionGroup className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>classes<span class=\"token punctuation\">}</span> component<span class=\"token operator\">=</span><span class=\"token string\">\"div\"</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">renderPanels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>TransitionGroup<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>由 render()方法可以看到，其底层实际还是依赖了三方库：<a href=\"https://github.com/reactjs/react-transition-group\">react-transition-group</a>。</p>","frontmatter":{"title":"React 过渡","date":"June 01, 2020","description":"通过研究 react-transition-group 库来了解react中如何实现丝滑的过渡效果"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"tags":["React","transition"],"slug":"/react-transition-group/","previous":null,"next":{"excerpt":"概述 插件架构宏观上来讲就是一种框架能够在确定的点上执行外部的代码，而不需要提前知道这部分代码的细节。 它既可以很简单，也可以很复杂。我们可以编写 webpack 插件，也可以开发 vs code…","fields":{"slug":"/plugin-mechanism/"},"frontmatter":{"date":"May 12, 2020","description":"前端工具如今基本都提供了插件机制，尤其以webpack著称，那么这种机制是如何实现的呢？","title":"前端插件机制的探索","tags":["plugin mechanism"]}}}}}