{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/plugin-mechanism/","result":{"data":{"site":{"siteMetadata":{"title":"学习随笔"}},"markdownRemark":{"id":"d0b7e811-d1a8-50ee-86f9-a9e9425cff4b","excerpt":"概述 插件架构宏观上来讲就是一种框架能够在确定的点上执行外部的代码，而不需要提前知道这部分代码的细节。 它既可以很简单，也可以很复杂。我们可以编写 webpack 插件，也可以开发 vs code…","html":"<h3>概述</h3>\n<p>插件架构宏观上来讲就是一种框架能够在确定的点上执行外部的代码，而不需要提前知道这部分代码的细节。</p>\n<p>它既可以很简单，也可以很复杂。我们可以编写 webpack 插件，也可以开发 vs code 的插件，其基本架构是相似的。</p>\n<p>开发插件需要遵循一些约定，就像网络传输需要协议。它们必须能够被主进程以某种方式获取并使用。通常最初的开发者会发布一些接口或开发套件，允许其他的开发者对原系统开发插件，提供新的能力。</p>\n<p>插件架构是开放封闭原则（OCP）的一种开发原则的体现，表明系统对拓展开放，对修改封闭。插件架构解决了不需要修改核心系统代码而可以对系统增加一些额外的功能特性，只需要一些额外的代码。插件可以单独开发，单独测试。</p>\n<h3>案例学习 Rollup</h3>\n<p>最近公司的部分项目开始采用 rollup 工具打包，笔者也在个人项目中开始上手使用。简单来说，配置项要比 webpack 相对来说简单一些，但是要注意 rollup 主要是为打包模块而生，并且代码需要使用 ES6 及以上的标准编写。</p>\n<p>常见的 rollup 配置：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    input<span class=\"token punctuation\">,</span>\n    output<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> file<span class=\"token punctuation\">:</span> <span class=\"token string\">'build/greymon.js'</span><span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">:</span> <span class=\"token string\">'umd'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> globals <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    external<span class=\"token punctuation\">:</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>globals<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token function\">nodeResolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">babel</span><span class=\"token punctuation\">(</span><span class=\"token function\">getBabelOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">commonjs</span><span class=\"token punctuation\">(</span>commonjsOptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token string\">'process.env.NODE_ENV'</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token string\">'development'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">sizeSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token punctuation\">{</span>\n    input<span class=\"token punctuation\">,</span>\n    output<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> file<span class=\"token punctuation\">:</span> <span class=\"token string\">'build/greymon.min.js'</span><span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">:</span> <span class=\"token string\">'umd'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> globals <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    external<span class=\"token punctuation\">:</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>globals<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token function\">nodeResolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">babel</span><span class=\"token punctuation\">(</span><span class=\"token function\">getBabelOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">commonjs</span><span class=\"token punctuation\">(</span>commonjsOptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token string\">'process.env.NODE_ENV'</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">sizeSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">uglify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token punctuation\">{</span>\n    input<span class=\"token punctuation\">,</span>\n    output<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> file<span class=\"token punctuation\">:</span> pkg<span class=\"token punctuation\">.</span>module<span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">:</span> <span class=\"token string\">'esm'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    external<span class=\"token punctuation\">,</span>\n    plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">babel</span><span class=\"token punctuation\">(</span><span class=\"token function\">getBabelOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">sizeSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>可以看到 rollup 可以输出多种模块依赖方式，而只需指定 <code class=\"language-text\">inputundefined outputundefined externalundefined plugins</code> 等。</p>\n<p>那么我们就来看一下 rollup 的 <code class=\"language-text\">plugins</code> 是怎么实现的。</p>","frontmatter":{"title":"前端插件机制的探索","date":"May 12, 2020","description":"前端工具如今基本都提供了插件机制，尤其以webpack著称，那么这种机制是如何实现的呢？"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"tags":["plugin mechanism"],"slug":"/plugin-mechanism/","previous":null,"next":{"excerpt":"前言 最近笔者利用休息时间仿了一波微博热搜页面，简单来讲就是在服务端利用 cheerio 解析页面 html，提取热搜标题，并根据标题展开每个热搜的详细内容。  文字内容可以很简单的提取，但是热搜中出现的图片想要直接拿来显示并非易事。 遇到问题 图片的 src…","fields":{"slug":"/load-image-denied-solution/"},"frontmatter":{"date":"April 27, 2020","description":"本文从实际出发尝试提供一种绕过图片防盗链校验的小技巧","title":"如何绕过图片防盗链的校验","tags":["Express","Referer ACL"]}}}}}