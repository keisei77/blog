{"componentChunkName":"component---src-templates-blog-post-js","path":"/minipack/","result":{"data":{"site":{"siteMetadata":{"title":"学习随笔"}},"markdownRemark":{"id":"5218c9a0-9c20-5e91-8f17-1202055c1843","excerpt":"模板打包器把小的代码片段编译成可在浏览器中运行的更大更复杂的文件。这些代码片段都是 JavaScript 文件，所有代码间的依赖都由模块系统来表示（https://webpack.js.org/concepts/modules）。 模板打包器需要一个入口文件。我们不需要在 HTML 中插入多个 script…","html":"<p>模板打包器把小的代码片段编译成可在浏览器中运行的更大更复杂的文件。这些代码片段都是 JavaScript 文件，所有代码间的依赖都由模块系统来表示（<a href=\"https://webpack.js.org/concepts/modules\">https://webpack.js.org/concepts/modules</a>）。</p>\n<p>模板打包器需要一个入口文件。我们不需要在 HTML 中插入多个 script 标签并执行，而是将该文件为我们应用的主入口文件来启动。</p>\n<p>打包器会从入口文件开始，寻找它依赖哪些文件，接着寻找依赖文件的依赖文件。就这样一直递归下去直到找出所有模块。这个过程所构成的依赖关系被称作依赖图。</p>\n<p>本文将来创建一个依赖图并通过它来将所有的模块都打包到一个文件中。</p>\n<p>注意：本文只是一个简单的来理解打包工具的例子，解决循环依赖，缓存模块导出，每个模块只解析一次等特性本文将跳过来保证简单化。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> babylon <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'babylon'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> traverse <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'babel-traverse'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> transformFromAst <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'babel-core'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token constant\">ID</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createAsset</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">filename</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> ast <span class=\"token operator\">=</span> babylon<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    sourceType<span class=\"token punctuation\">:</span> <span class=\"token string\">'module'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> dependencies <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">ImportDeclaration</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> node <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      dependencies<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token constant\">ID</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> code <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">transformFromAst</span><span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    presets<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'env'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">,</span>\n    filename<span class=\"token punctuation\">,</span>\n    dependencies<span class=\"token punctuation\">,</span>\n    code<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createGraph</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entry</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> mainAsset <span class=\"token operator\">=</span> <span class=\"token function\">createAsset</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> queue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>mainAsset<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> asset <span class=\"token keyword\">of</span> queue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    asset<span class=\"token punctuation\">.</span>mapping <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> dirname <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">dirname</span><span class=\"token punctuation\">(</span>asset<span class=\"token punctuation\">.</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    asset<span class=\"token punctuation\">.</span>dependencies<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">relativePath</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> absolutePath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>dirname<span class=\"token punctuation\">,</span> relativePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">const</span> child <span class=\"token operator\">=</span> <span class=\"token function\">createAsset</span><span class=\"token punctuation\">(</span>absolutePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      asset<span class=\"token punctuation\">.</span>mapping<span class=\"token punctuation\">[</span>relativePath<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> child<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n\n      queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> queue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">bundle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">graph</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> modules <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n\n  graph<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mod</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    modules <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>mod<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">: [\n      function (require, module, exports) {\n        </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>mod<span class=\"token punctuation\">.</span>code<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n      },\n      </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">.</span>mapping<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">,\n    ],</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  (function (modules) {\n    function require(id) {\n      const [fn, mapping] = modules[id];\n\n      function localRequire(name) {\n        return require(mapping[name]);\n      }\n\n      const module = { exports: {} };\n\n      fn(localRequire, module, module.exports);\n\n      return module.exports;\n    }\n\n    require(0);\n  })({</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>modules<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">})\n  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> graph <span class=\"token operator\">=</span> <span class=\"token function\">createGraph</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./example/entry.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">bundle</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"title":"迷你打包工具","date":"December 25, 2019","description":"精简版打包工具，领略内部实现之巧"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/minipack/","previous":{"fields":{"slug":"/web-browser-render/"},"frontmatter":{"title":"渲染器进程的内部执行"}},"next":null}}}