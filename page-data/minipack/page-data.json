{"componentChunkName":"component---src-templates-blog-post-js","path":"/minipack/","result":{"data":{"site":{"siteMetadata":{"title":"学习随笔"}},"markdownRemark":{"id":"a51e9608-6989-561b-8d8e-27e37eb0cc91","excerpt":"模板打包器把小的代码片段转译成可在浏览器中运行的更大更复杂的文件。这些代码片段都是 JavaScript 文件，所有代码间的依赖都由模块系统来表示（https://webpack.js.org/concepts/modules）。 模板打包器需要一个入口文件。我们不需要在 HTML 中插入多个 script…","html":"<p>模板打包器把小的代码片段转译成可在浏览器中运行的更大更复杂的文件。这些代码片段都是 JavaScript 文件，所有代码间的依赖都由模块系统来表示（<a href=\"https://webpack.js.org/concepts/modules\">https://webpack.js.org/concepts/modules</a>）。</p>\n<p>模板打包器需要一个入口文件。我们不需要在 HTML 中插入多个 script 标签并执行，而是将该文件为我们应用的主入口文件来启动。</p>\n<p>打包器会从入口文件开始，寻找它依赖哪些文件，接着寻找依赖文件的依赖文件。就这样一直递归下去直到找出所有模块。这个过程所构成的依赖关系被称作依赖图。</p>\n<p>本文将来创建一个依赖图并通过它来将所有的模块都打包到一个文件中。</p>\n<p>注意：本文只是一个简单的来理解打包工具的例子，解决循环依赖，缓存模块导出，每个模块只解析一次等特性本文将跳过来保证简单化。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> babylon <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'babylon'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> traverse <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'babel-traverse'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> transformFromAst <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'babel-core'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token constant\">ID</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 我们创建一个接收文件路径参数的函数，读取文件内容，取出该文件的依赖。</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">createAsset</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">filename</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 读取文件内容</span>\n  <span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 现在我们尝试去找出该文件依赖了哪些文件。我们可以通过查看内容中的 import 字符串。这个方式比较笨拙，所以我们使用 JavaScript 解析器。</span>\n\n  <span class=\"token comment\">// JavaScript 解析器是读取并解析 JavaScript 代码的工具。它们会生成一个称为 AST （abstract syntax tree） 的更抽象的模型。</span>\n\n  <span class=\"token comment\">// 可访问 AST Explorer (https://astexplorer.net) 来了解 AST 的结构。</span>\n\n  <span class=\"token comment\">// AST 包含了我们代码的大量信息。我们可以通过查看它来了解我们的代码来做什么。</span>\n  <span class=\"token keyword\">const</span> ast <span class=\"token operator\">=</span> babylon<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    sourceType<span class=\"token punctuation\">:</span> <span class=\"token string\">'module'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 这个数组用来保存当前模块依赖的所有模块的相对路径。</span>\n  <span class=\"token keyword\">const</span> dependencies <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 我们遍历 AST 来找出依赖了哪些模块。为了得到结果，我们检查 AST 中每个 import 声明。</span>\n  <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// EcmaScript 模块因为静态的设计所以解析起来非常简单。同时这意味着我们不能条件式 import 另一个模块。每次我们看到一个 import 声明我们都可以将它的值作为一个依赖。</span>\n    <span class=\"token function-variable function\">ImportDeclaration</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> node <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 我们把 import 的值保存至上面的依赖数组。</span>\n      dependencies<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 我们同时通过自增1来确定当前模块的唯一标识。</span>\n  <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token constant\">ID</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 为了保证EcmaScript 的模块和其他新特性能在所有浏览器中运行，我们使用 Babel (https://babeljs.io) 来转译。</span>\n\n  <span class=\"token comment\">// `presets` 选项是告诉 Babel 如何转译的规则的集合。</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> code <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">transformFromAst</span><span class=\"token punctuation\">(</span>ast<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    presets<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'env'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 返回该模块所有的信息。</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">,</span>\n    filename<span class=\"token punctuation\">,</span>\n    dependencies<span class=\"token punctuation\">,</span>\n    code<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 我们开始读取入口文件的依赖。接下来提取该文件依赖的所有依赖，以此递归。</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">createGraph</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entry</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 开始解析入口文件。</span>\n  <span class=\"token keyword\">const</span> mainAsset <span class=\"token operator\">=</span> <span class=\"token function\">createAsset</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 我们使用一个队列来解析每个资源的依赖。</span>\n  <span class=\"token keyword\">const</span> queue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>mainAsset<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 我们使用 `for ... of` 迭代这个队列。初始时队列中只有一个资源，但是我们随后的迭代会增加新的资源到这个队列中。当队列为空时退出迭代。</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> asset <span class=\"token keyword\">of</span> queue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 每个资源都有自己依赖的模块的相对路径列表。我们去迭代它们，通过 `createAsset()` 函数解析它们，将该模块的依赖保存至下面的对象中。</span>\n    asset<span class=\"token punctuation\">.</span>mapping <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 这是该模块的目录地址</span>\n    <span class=\"token keyword\">const</span> dirname <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">dirname</span><span class=\"token punctuation\">(</span>asset<span class=\"token punctuation\">.</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 我们遍历依赖关系的相对路径</span>\n    asset<span class=\"token punctuation\">.</span>dependencies<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">relativePath</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// `createAsset()` 函数需要绝对的文件路径。而 dependencies 中为相对路径。我们可以通过 join 方法来获得绝对路径。</span>\n      <span class=\"token keyword\">const</span> absolutePath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>dirname<span class=\"token punctuation\">,</span> relativePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// 解析资源，读取内容，提取它的依赖</span>\n      <span class=\"token keyword\">const</span> child <span class=\"token operator\">=</span> <span class=\"token function\">createAsset</span><span class=\"token punctuation\">(</span>absolutePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// 本质上 `asset` 依赖于 `child`，我们通过在 `mapping` 对象上增加相对路径的值为 child 的 id 的属性来维护这份关系。</span>\n      asset<span class=\"token punctuation\">.</span>mapping<span class=\"token punctuation\">[</span>relativePath<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> child<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// 最后，我们将 child 资源加入队列来使它的依赖也能被迭代和解析。</span>\n      queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 此时队列包含了应用下所有的模块：这是我们表示依赖图的形式。</span>\n  <span class=\"token keyword\">return</span> queue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 接下来我们定义一个函数，通过接收我们的依赖图并返回一个可以在浏览器中运行的文件。</span>\n\n<span class=\"token comment\">// 我们的 bundle 会持有一个立即执行函数：(function() {})()</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">bundle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">graph</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> modules <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 我们会对依赖图进行构造，生成 `key: value,` 格式的字符串，最后通过 {} 包裹起来。</span>\n  graph<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mod</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 图中的每个模块都有一个入口在该对象中。我们使用模块的 id 作为键，使用一个数组作为值。</span>\n\n    <span class=\"token comment\">// 数组中的第一个值是以一个函数包裹的模块的代码。原因是模块必须是有作用域的：在一个模块中定义的变量不应该影响到全局变量。</span>\n\n    <span class=\"token comment\">// 我们的模块在转译之后使用 CommonJS 的模块系统：需要 `require`, `module` 和 `exports` 对象。目前在浏览器中还不能使用，所以我们会实现它们并将它们注入我们的包装函数中。</span>\n\n    <span class=\"token comment\">// 对于数组第二个值，我们将模块和模块的依赖对应的 mapping 对象转为字符串。这个对象形式如： { './relative/path': 1 }</span>\n\n    <span class=\"token comment\">// 这是因为我们的模块转译后的代码需要调用参数为相对路径的 `require()` 函数。当该函数被调用时，我们能够知道图中哪个模块对应于此模块的相对路径。</span>\n\n    modules <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>mod<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">: [\n      function (require, module, exports) {\n        </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>mod<span class=\"token punctuation\">.</span>code<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n      },\n      </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">.</span>mapping<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">,\n    ],</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 最后，我们来实现立即执行函数的函数体</span>\n\n  <span class=\"token comment\">// 我们首先来实现 `require()` 函数：它接收模块 id 并在我们之前构建好的 `modules` 对象中寻找。我们结构这个有两个元素的数组，来获取我们的包装函数和 mapping 对象。</span>\n\n  <span class=\"token comment\">// 我们的模块代码需要调用 `require()` 函数，它接收文件相对路径作为参数而不是模块的 id。我们的 require 函数需要模块 id。此外，两个不同的模块可能会 `require()` 同一个相对路径。</span>\n\n  <span class=\"token comment\">// 为了解决这个问题，当一个模块 required 时我们创建一个新的专有的 `require` 函数来调用。它是模块指定的函数，并且知道通过从模块的 mapping 对象的相对路径中找到对应的 id。</span>\n\n  <span class=\"token comment\">// 最后，通过 CommonJS, 当一个模块被加载，它可以通过改变 `exports` 对象来暴露值。`exports` 对象在被模块的代码改变后，通过 `require()` 函数返回。</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  (function (modules) {\n    function require(id) {\n      const [fn, mapping] = modules[id];\n\n      function localRequire(name) {\n        return require(mapping[name]);\n      }\n\n      const module = { exports: {} };\n\n      fn(localRequire, module, module.exports);\n\n      return module.exports;\n    }\n\n    require(0);\n  })({</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>modules<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">})\n  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> graph <span class=\"token operator\">=</span> <span class=\"token function\">createGraph</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./example/entry.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">bundle</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"title":"迷你打包工具","date":"December 25, 2019","description":"精简版打包工具，领略内部实现之巧"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/minipack/","previous":{"fields":{"slug":"/web-browser-render/"},"frontmatter":{"title":"渲染器进程的内部执行"}},"next":null}}}