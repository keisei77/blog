{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/koa-vs-express/","result":{"data":{"site":{"siteMetadata":{"title":"学习随笔"}},"markdownRemark":{"id":"f5ba4ccc-10a9-553f-b038-62c577d52ebe","excerpt":"从理念上来说，Koa 意图“修复并取代 node”，而 Express 做的是“增强 node”。Koa 使用 promise 和 async 函数来摆脱回调地狱并简化异常处理逻辑。它暴露了自身的  和  对象而取代了 node 的  和  对象。 Express 从另一方面，通过增加额外的属性和方法增强了 node…","html":"<p>从理念上来说，Koa 意图“修复并取代 node”，而 Express 做的是“增强 node”。Koa 使用 promise 和 async 函数来摆脱回调地狱并简化异常处理逻辑。它暴露了自身的 <code class=\"language-text\">ctx.request</code> 和 <code class=\"language-text\">ctx.response</code> 对象而取代了 node 的 <code class=\"language-text\">req</code> 和 <code class=\"language-text\">res</code> 对象。</p>\n<p>Express 从另一方面，通过增加额外的属性和方法增强了 node 的 <code class=\"language-text\">req</code> 和 <code class=\"language-text\">res</code> 对象，并引入了许多框架上的功能，例如路由和模板，而 Koa 没有这么做。</p>\n<p>Koa 可以被看作是 node.js 的 <code class=\"language-text\">http</code> 模块的抽象，Express 是 node.js 的应用框架。</p>\n<table>\n<thead>\n<tr>\n<th>功能</th>\n<th>Koa</th>\n<th>Express</th>\n<th>Connect</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>中间件内核</td>\n<td>✓</td>\n<td>✓</td>\n<td>✓</td>\n</tr>\n<tr>\n<td>路由</td>\n<td></td>\n<td>✓</td>\n<td></td>\n</tr>\n<tr>\n<td>模板</td>\n<td></td>\n<td>✓</td>\n<td></td>\n</tr>\n<tr>\n<td>发送文件</td>\n<td></td>\n<td>✓</td>\n<td></td>\n</tr>\n<tr>\n<td>JSONP</td>\n<td></td>\n<td>✓</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>因此，如果你更倾向于 node.js，喜欢传统的 node.js-style 编码方式，那么可以采用 Connect/Express 或类似的框架。如果想摆脱回调，使用 Koa。</p>\n<p>作为不同理念的结果是传统 node.js 中间件，即形如 <code class=\"language-text\">(requndefined resundefined next)</code> 的函数，与 Koa 是不兼容的。如果要迁移应用，需要从根本上重写。</p>\n<h3>Koa 会取代 Express 吗？</h3>\n<p>Koa 更像 Connect，但是好多 Express 的优点都移植到了 Koa 的中间件层来帮助构建更强大的基础。这使得不仅是终端应用代码还是整个技术栈在编写中间件时更加友好，更少出错的可能。</p>\n<p>通常，当诸如签名的 cookie 之类的功能通常是特定于应用程序而非特定于中间件时，许多中间件会重新实现类似的功能，甚至更糟糕地错误实现它们。</p>\n<h3>Koa 会取代 Connect 吗？</h3>\n<p>并不是，现在生成器允许我们用少量的回调编写代码，只是对类似的功能有着不同的看法。Connect 具有同样的功能，有些人可能仍然喜欢它，这取决于个人爱好。</p>\n<h3>为什么 Koa 不是 Express 4.0？</h3>\n<p>Koa 与人们所熟知的 Express 大相径庭，设计从根本上有很大的不同，所以从 Express 3.0 到 Express 4.0 的迁移成本意味着要重写整个应用，所以我们认为创建一个新的库是更加合适的。</p>\n<h3>Koa 与 Connect/Express 有哪些不同？</h3>\n<h4>基于 Promise 的控制流</h4>\n<ul>\n<li>没有回调地狱</li>\n<li>通过 try/catch 对错误有更好的处理</li>\n<li>无需域名</li>\n</ul>\n<h4>Koa 是精简的</h4>\n<ul>\n<li>不像 Connect 和 Express，Koa 本身没有包含任何中间件</li>\n<li>不像 Express，Koa 不提供路由</li>\n<li>不像 Express，许多方便的工具没有提供。例如，发送文件。</li>\n<li>Koa 更加模块化</li>\n</ul>\n<h4>Koa 较少依赖中间件</h4>\n<p>例如，不使用“body 解析”中间件，而是使用一个 body 解析函数</p>\n<h4>Koa 抽象了 node 的 request/response</h4>\n<ul>\n<li>更少黑科技</li>\n<li>更好的用户体验</li>\n<li>正确的处理流</li>\n</ul>\n<h4>Koa 路由（第三方库支持）</h4>\n<p>由于 Express 自带路由，但是 Koa 没有任何内建路由，社区现在有许多如 koa-router 和 koa-route 的库可以使用。同样的，就像 Express 中有 helmet 保障安全性，对于 Koa，我们有可用的 koa-helmet，更多可用的<a href=\"https://github.com/koajs/koa/wiki\">第三方库</a>可查看。</p>\n<h3>参考</h3>\n<p><a href=\"https://github.com/koajs/koa/blob/master/docs/koa-vs-express.md\">https://github.com/koajs/koa/blob/master/docs/koa-vs-express.md</a></p>","frontmatter":{"title":"【译】Koa 对比 Express","date":"February 20, 2020","description":"Koa 与 Express 有哪些异同之处"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"tags":["Koa","Express"],"slug":"/koa-vs-express/","previous":{"excerpt":"React Native 是一个能够允许 JavaScript 和 native 代码一样在 iOS 和 Android 设备上运行和交互的现代框架。它提供了一种编写一次多端运行的能力，有机会使我们统一应用的架构。对于新手而言了解 RN…","fields":{"slug":"/architecture-of-rn/"},"frontmatter":{"date":"February 22, 2020","description":"对RN架构有一个整体的了解，原文章可能已过时但核心原理应该是不变的。","title":"【译】初识 React Native 架构","tags":["Architecture","React Native"]}},"next":{"excerpt":"web 开发者想必都一定听说过 express.js。Express 是 node 中比较受欢迎的轻量的 web 服务器框架。 本文我们将通过分析 express…","fields":{"slug":"/how-expressjs-works/"},"frontmatter":{"date":"February 14, 2020","description":"Express.js 工作原理，部分源码分析","title":"【译】Express.js 工作原理","tags":["express.js"]}}}}}