{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/how-expressjs-works/","result":{"data":{"site":{"siteMetadata":{"title":"学习随笔"}},"markdownRemark":{"id":"9d8e85bb-75e2-552e-bd33-2a561c26039a","excerpt":"web 开发者想必都一定听说过 express.js。Express 是 node 中比较受欢迎的轻量的 web 服务器框架。 本文我们将通过分析 express 源码来了解在底层它是如何工作的。学习一个流行框架的原理，可以帮助我们更好地使用它们来构建应用程序，减少引入它们带来的“魔法”问题。 本文目录： “Hello…","html":"<p>web 开发者想必都一定听说过 <a href=\"https://expressjs.com/\">express.js</a>。Express 是 node 中比较受欢迎的轻量的 web 服务器框架。</p>\n<p>本文我们将通过分析 express 源码来了解在底层它是如何工作的。学习一个流行框架的原理，可以帮助我们更好地使用它们来构建应用程序，减少引入它们带来的“魔法”问题。</p>\n<p>本文目录：</p>\n<ol>\n<li><a href=\"#hello-world-example\">“Hello World” 例子</a></li>\n<li><a href=\"#create-new-express-app\">创建新的 express 应用</a></li>\n<li>\n<p><a href=\"#create-new-route\">创建新的路由</a></p>\n<ol>\n<li><a href=\"#layers\">分层</a></li>\n</ol>\n</li>\n<li><a href=\"#start-http-server\">启动 HTTP 服务</a></li>\n<li><a href=\"#handle-http-request\">处理 HTTP 请求</a></li>\n<li><a href=\"#everything-else\">其他</a></li>\n</ol>\n<blockquote>\n<p>为了更好地理解源码，将它 clone 到本地是比较好地方式，本文<a href=\"https://github.com/expressjs/express/tree/c0136d8b48dd3526c58b2ad8666fb4b12b55116c\">使用的版本</a>。\n评论中的 <code class=\"language-text\">// ...</code> 是部分源码为了简洁做了省略。</p>\n</blockquote>\n<h3><a name=\"hello-world-example\"></a>“Hello World” 例子</h3>\n<p>我们从官网的“Hello world”例子开始深入源码：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Example app listening on port 3000!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>上述代码启动了端口号 3000 的 HTTP 服务器，并在命中 <code class=\"language-text\">GET /</code> 路由后发送“Hello World!”文本响应。笼统地来讲，我们可以从以下四个阶段来分析：</p>\n<ol>\n<li>创建一个新的 express 应用</li>\n<li>创建一个新的路由</li>\n<li>基于给定的端口号启动 HTTP 服务器</li>\n<li>当有请求进来时做出对应处理</li>\n</ol>\n<h3><a name=\"create-new-express-app\"></a>创建新的 express 应用</h3>\n<p><code class=\"language-text\">const app = express()</code> 这个表达式可以创建一个新的 express 应用。在 <a href=\"https://github.com/expressjs/express/blob/c0136d8b48dd3526c58b2ad8666fb4b12b55116c/lib/express.js#L37\">lib/express.js</a> 中的 <code class=\"language-text\">createApplication</code> 函数是默认导出的对象，就是我们看到的 <code class=\"language-text\">express()</code> 函数调用。</p>\n<p>比较关键的代码是：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">var</span> mixin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'merge-descriptors'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> proto <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./application'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createApplication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 这个是该函数返回的变量，具体我们会在后面讲到，重要的是要记住它的签名：function(req, res, next)</span>\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">app</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    app<span class=\"token punctuation\">.</span><span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token comment\">// `mixin` 函数将所有 `proto` 的方法合并至 `app`，我们例子中用到的 `get` 方法就是合并进来的</span>\n  <span class=\"token function\">mixin</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">,</span> proto<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">return</span> app<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>从这个函数中返回的<code class=\"language-text\">app</code> 对象就是我们程序中用到的。<code class=\"language-text\">app.get</code> 方法通过 <a href=\"https://github.com/component/merge-descriptors\">merge-descriptors</a> 库中的 <code class=\"language-text\">mixin</code> 函数从 <code class=\"language-text\">proto</code> 中获取并添加的。</p>\n<p><code class=\"language-text\">proto</code> 它是从 <a href=\"https://github.com/expressjs/express/blob/c0136d8b48dd3526c58b2ad8666fb4b12b55116c/lib/application.js\">lib/application</a> 中导入的。</p>\n<h3><a name=\"create-new-route\"></a>创建新的路由</h3>\n<p>我们下面来简单看一下 <code class=\"language-text\">app.get</code> 方法在<a href=\"https://github.com/expressjs/express/blob/c0136d8b48dd3526c58b2ad8666fb4b12b55116c/lib/application.js#L472\">源码</a>中的实现：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> slice <span class=\"token operator\">=</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>slice<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ...</span>\n<span class=\"token comment\">/**\n * Delegate `.VERB(...)` calls to `router.VERB(...)`.\n */</span>\n\n<span class=\"token comment\">// `methods` 是一个包含 ['get', 'post', ...] 等 HTTP 方法的数组</span>\nmethods<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">method</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 这应该是 app.get 方法的签名</span>\n  app<span class=\"token punctuation\">[</span>method<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 一些初始化的代码</span>\n\n    <span class=\"token comment\">// 在应用的 router 内部根据 path 创建一个 route</span>\n    <span class=\"token keyword\">var</span> route <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_router<span class=\"token punctuation\">.</span><span class=\"token function\">route</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 根据从第二个参数开始后续的参数来调用 handler</span>\n    route<span class=\"token punctuation\">[</span>method<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">,</span> <span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 返回 `app` 实例，来使方法可以链式调用</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这里实现比较巧妙的是，所有的 HTTP 动词方法，如 <code class=\"language-text\">app.get</code>，<code class=\"language-text\">app.post</code>，<code class=\"language-text\">app.put</code> 本质上功能都是类似的。如果我们只关注 <code class=\"language-text\">get</code> 方法，可以简化为：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">get</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path<span class=\"token punctuation\">,</span> handler</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">var</span> route <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_router<span class=\"token punctuation\">.</span><span class=\"token function\">route</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  route<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>尽管上面的函数有两个参数，它实际和 <code class=\"language-text\">app[method] = function(path){...}</code> 定义是相似的。第二个参数 <code class=\"language-text\">handler</code> 是在 slice.call(arguments, 1) 中获取的。</p>\n<blockquote>\n<p>长话短说，<code class=\"language-text\">app.&lt;method&gt;</code> 只是在应用 router 中使用 <code class=\"language-text\">route</code> 方法保存 route，然后传递 <code class=\"language-text\">handler</code> 到 <code class=\"language-text\">route.&lt;method&gt;</code></p>\n</blockquote>\n<p>router 的 <code class=\"language-text\">route()</code> 方法在 <a href=\"https://github.com/expressjs/express/blob/c0136d8b48dd3526c58b2ad8666fb4b12b55116c/lib/router/index.js#L491\">lib/router/index.js</a> 中定义：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// proto 是 `_router` 对象的原型定义</span>\nproto<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">route</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> route <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Route</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> layer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Layer</span><span class=\"token punctuation\">(</span>\n    path<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      sensitive<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>caseSensitive<span class=\"token punctuation\">,</span>\n      strict<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>strict<span class=\"token punctuation\">,</span>\n      end<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    route<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  layer<span class=\"token punctuation\">.</span>route <span class=\"token operator\">=</span> route<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>layer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> route<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">route.get</code> 方法的定义与 <code class=\"language-text\">app.get</code> 类似，在 <a href=\"https://github.com/expressjs/express/blob/c0136d8b48dd3526c58b2ad8666fb4b12b55116c/lib/router/route.js#L192\">lib/router/route.js</a> 中：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">methods<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">method</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Route</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">[</span>method<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// `flatten` 将嵌套的数组转换成一维的数组</span>\n    <span class=\"token keyword\">var</span> handlers <span class=\"token operator\">=</span> <span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> handles<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> handle <span class=\"token operator\">=</span> handles<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// ...</span>\n      <span class=\"token comment\">// 传给 route 的每个 handler 都会创建一个 layer，并添加到 route 栈中</span>\n      <span class=\"token keyword\">var</span> layer <span class=\"token operator\">=</span> <span class=\"token function\">Layer</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// ...</span>\n\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>layer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>每个 route 可以有多个 handler，并基于每个 handler 构造 <code class=\"language-text\">Layer</code> 并压入栈中。</p>\n<h4><a name=\"layers\"></a>分层</h4>\n<p><code class=\"language-text\">_router</code> 和 <code class=\"language-text\">route</code> 都使用了同一类型的对象 <code class=\"language-text\">Layer</code>。我们可以从<a href=\"https://github.com/expressjs/express/blob/c0136d8b48dd3526c58b2ad8666fb4b12b55116c/lib/router/layer.js#L33\">构造函数的定义</a>来观察 layer 是用来做什么的：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Layer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">,</span> fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handle <span class=\"token operator\">=</span> fn<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>regexp <span class=\"token operator\">=</span> <span class=\"token function\">pathRegexp</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>keys <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>每个 layer 都有一个 path，一些 option 和一个待处理的函数。在我们的 router 中，这个函数是 <code class=\"language-text\">route.dispatch</code>(我们会在下面的章节介绍用途，它类似于将请求传递到单个路由)。在 route 中，这个函数就是我们定义的 handler 函数。</p>\n<p>每个 layer 也有一个<a href=\"https://github.com/expressjs/express/blob/c0136d8b48dd3526c58b2ad8666fb4b12b55116c/lib/router/layer.js#L86\">处理请求</a>的函数：<code class=\"language-text\">handle_request</code>，在 Layer 初始化阶段真正执行传入的函数。</p>\n<p>我们来回顾一下通过 <code class=\"language-text\">app.get</code> 方法创建一个 route：</p>\n<ol>\n<li>在应用的 router(<code class=\"language-text\">this._router</code>) 上创建一个 route</li>\n<li>route <code class=\"language-text\">dispatch</code> 方法作为 handler 方法传递给 layer，这个 layer 压入 router 栈中</li>\n<li>请求的 handler 本身作为 handler 方法传递给 layer，这个 layer 压入 route 栈</li>\n</ol>\n<p>在最后，所有的 handler 以在 route 栈内部的 layer 的形式存储到 <code class=\"language-text\">app</code> 中，<code class=\"language-text\">dispatch</code> 方法传递给 layer 并存储在 router 栈上。</p>\n<p><img src=\"/a1d440ab10d27252ebff47ee98075640/express-routing.svg\" alt=\"express routing\"></p>\n<p>处理 HTTP 请求也与此类似，我们随后来<a href=\"#handle-http-request\">了解</a>。</p>\n<h3><a name=\"start-http-server\"></a>启动 HTTP 服务</h3>\n<p>在配置好路由之后，服务器开始启动。在我们的例子中调用了 <code class=\"language-text\">app.listen</code> 方法，传入了端口号和回调函数。可以通过 <a href=\"https://github.com/expressjs/express/blob/c0136d8b48dd3526c58b2ad8666fb4b12b55116c/lib/application.js#L616\">lib/application.js</a> 来了解：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">listen</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>看起来 <code class=\"language-text\">app.listen</code> 只是包装了一下 <code class=\"language-text\">http.createServer</code>。这是说的通的，回想一下<a href=\"#create-new-express-app\">第一章</a>，<code class=\"language-text\">app</code> 实际上是 function(req, res, next){…} 签名的函数，与 <code class=\"language-text\">http.createServer</code> 所需要的函数签名 function(req, res) {…} 是兼容的。</p>\n<p>当意识到这些时你会发现这样非常简洁，express.js 所提供的所有能力可以总结为是一个非常高明的处理函数。</p>\n<h3><a name=\"handle-http-request\"></a>处理 HTTP 请求</h3>\n<p>现在我们知道 <code class=\"language-text\">app</code> 实际是一个普通的请求处理对象，我们下面通过定位一个 HTTP 请求来最终定位到内部 handler 的位置。</p>\n<p>从 <a href=\"https://github.com/expressjs/express/blob/c0136d8b48dd3526c58b2ad8666fb4b12b55116c/lib/express.js#L38\">lib/express.js</a> 中的 <code class=\"language-text\">createApplication</code> 函数：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">app</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  app<span class=\"token punctuation\">.</span><span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>请求传递到 <code class=\"language-text\">app.handle</code> 的方法在 <a href=\"https://github.com/expressjs/express/blob/c0136d8b48dd3526c58b2ad8666fb4b12b55116c/lib/application.js#L158\">lib/application.js</a> 中定义：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">handle</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// `this._router` 是我们从 `app.get` 处定义的路由</span>\n  <span class=\"token keyword\">var</span> router <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_router<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token comment\">// 请求进一步传递到 `handle` 方法</span>\n  router<span class=\"token punctuation\">.</span><span class=\"token function\">handler</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> done<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">router.handler</code> 方法在 <a href=\"https://github.com/expressjs/express/blob/c0136d8b48dd3526c58b2ad8666fb4b12b55116c/lib/router/index.js#L136\">lib/router/index.js</a> 中定义：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">proto<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">handle</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> out</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> self <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token comment\">// self.stack 是在调用时压入的所有layer</span>\n  <span class=\"token keyword\">var</span> stack <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token comment\">// 根据请求获取path name</span>\n    <span class=\"token keyword\">var</span> path <span class=\"token operator\">=</span> <span class=\"token function\">getPathname</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">var</span> layer<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> match<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> route<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>match <span class=\"token operator\">!==</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">&amp;&amp;</span> idx <span class=\"token operator\">&lt;</span> stack<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      layer <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">[</span>idx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      match <span class=\"token operator\">=</span> <span class=\"token function\">matchLayer</span><span class=\"token punctuation\">(</span>layer<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      route <span class=\"token operator\">=</span> layer<span class=\"token punctuation\">.</span>route<span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// ...</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>match <span class=\"token operator\">!==</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\">// ... 一些验证 HTTP 方法，headers 的校验代码</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// ... 一些验证</span>\n\n    <span class=\"token comment\">// 为 layer 处理所有参数</span>\n    self<span class=\"token punctuation\">.</span><span class=\"token function\">process_params</span><span class=\"token punctuation\">(</span>layer<span class=\"token punctuation\">,</span> paramcalled<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 一旦参数处理完成， 就会调用 `layer.handler_request` 方法</span>\n        <span class=\"token keyword\">return</span> layer<span class=\"token punctuation\">.</span><span class=\"token function\">handle_request</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>简单来讲，<code class=\"language-text\">router.handle</code> 函数在它的栈上遍历所有的 layer，直到找到匹配 path 的请求。最终会调用 layer 的 <code class=\"language-text\">handle_request</code> 方法，执行先前定义过的 handler 函数。这个 handler 函数就是在 [lib/router/route.js] 中定义的 <code class=\"language-text\">dispatch</code> 方法：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">Route</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">dispatch</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> done</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">var</span> layer <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">[</span>idx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// ... 一些校验和错误检查</span>\n    layer<span class=\"token punctuation\">.</span><span class=\"token function\">handle_request</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>与 router 类似，每个 route 遍历所有的 layer，调用它们的 <code class=\"language-text\">handle_request</code> 方法，即执行传递给 layer 的 handler 方法。最后，HTTP 请求到达应用的底层。</p>\n<p><img src=\"/267bfd0839b56afc11b097382797ae8d/express-routing-http.svg\" alt=\"express routing http\"></p>\n<h3><a name=\"everything-else\"></a>其他</h3>\n<p>尽管我们看到了 express 来使 web 服务器工作的的核心代码，它还提供了很多其他的功能。我们跳过了许多必要的验证和所有的帮助函数。最后，一个非常关键的中间件功能，它能够帮助我们劫持所有请求并做出对应的处理。</p>\n<h3>参考</h3>\n<p><a href=\"https://www.sohamkamani.com/blog/2018/05/30/understanding-how-expressjs-works/\">https://www.sohamkamani.com/blog/2018/05/30/understanding-how-expressjs-works/</a></p>","frontmatter":{"title":"【译】Express.js 工作原理","date":"February 14, 2020","description":"Express.js 工作原理，部分源码分析"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"tags":["express.js"],"slug":"/how-expressjs-works/","previous":{"excerpt":"从理念上来说，Koa 意图“修复并取代 node”，而 Express 做的是“增强 node”。Koa 使用 promise 和 async 函数来摆脱回调地狱并简化异常处理逻辑。它暴露了自身的  和  对象而取代了 node 的  和  对象。 Express…","fields":{"slug":"/koa-vs-express/"},"frontmatter":{"date":"February 20, 2020","description":"Koa 与 Express 有哪些异同之处","title":"【译】Koa 对比 Express","tags":["Koa","Express"]}},"next":{"excerpt":"当前已经有很多的文章或会议中谈到了服务端渲染这种技术。而且社区中也出现了许多一站式的 React 框架，但是真正想要了解服务端渲染还是需要自己动手实现一下比较好。不过首先我们需要了解什么是服务端渲染和客户端渲染。 JavaScript 革命 浏览器比 5-1…","fields":{"slug":"/react-ssr/"},"frontmatter":{"date":"February 09, 2020","description":"SSR 的入门学习","title":"【译】React SSR 初体验","tags":["React","SSR"]}}}}}