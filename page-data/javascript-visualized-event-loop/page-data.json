{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/javascript-visualized-event-loop/","result":{"data":{"site":{"siteMetadata":{"title":"学习随笔"}},"markdownRemark":{"id":"19682a28-4419-5d29-8d8c-bd710b5f9ae5","excerpt":"事件循环大概是每个 JavaScript 初学者都会感到困惑的概念。本文将通过可视化的方式来尽量对该概念作详细的解释。 我们来首先了解一下什么是事件循环，以及我们为什么要关心它？ JavaScript 是单线程的：任何时候都只能执行一个任务。这通常没有太大的问题，但当要执行一个 3…","html":"<p>事件循环大概是每个 JavaScript 初学者都会感到困惑的概念。本文将通过可视化的方式来尽量对该概念作详细的解释。</p>\n<p>我们来首先了解一下什么是事件循环，以及我们为什么要关心它？</p>\n<p>JavaScript 是<strong>单线程</strong>的：任何时候都只能执行一个任务。这通常没有太大的问题，但当要执行一个 30 秒的任务时，我们只能等待任务执行完毕才能继续别的任务（JavaScript 在浏览器中默认运行在主线程，所以整个 UI 就卡住了）。已经 2020 年了，没人愿意访问慢的，失去响应的网站。</p>\n<p>幸运的是，浏览器给了我们 JavaScript 引擎没有提供的功能：Web API。包含 DOM API，<code class=\"language-text\">setTimeout</code>，HTTP 请求等等。这可以帮助我们实现异步，非阻塞的需求。</p>\n<p>当我们执行函数时，它被放入了调用栈中。调用栈是 JS 引擎的一部分，不是浏览器特有的。它本质是一个栈，一种先入后出的数据结构。当函数返回一个值时，它会从栈顶中弹出。</p>\n<p><img src=\"/050d10baa1b0a5c6421959dbb21aff9e/call-stack.gif\" alt=\"call stack\"></p>\n<p><code class=\"language-text\">respond</code> 函数返回了 <code class=\"language-text\">setTimeout</code> 函数。<code class=\"language-text\">setTimeout</code> 是 Web API 提供的：它允许我们延迟执行任务而不阻塞主线程。传入 <code class=\"language-text\">setTimeout</code> 函数的回调函数 <code class=\"language-text\">() =&gt; { return &#39;Hey!&#39; }</code> 被加入 Web API。与此同时，<code class=\"language-text\">setTimeout</code> 函数和 <code class=\"language-text\">respond</code> 函数从栈顶弹出，它们都返回了各自的值。</p>\n<p><img src=\"/53e8d25ab9ffbca763742a73d0968885/setTimeout.gif\" alt=\"setTimeout\"></p>\n<p>在 Web API 中，一个计时器尽可能运行第二个参数传入的值的时长，1000ms。回调函数不会立即添加到调用栈中，它们被添加到队列中。</p>\n<p><img src=\"/bb133167acba9732c254fe1b4e2604a3/queue.gif\" alt=\"queue\"></p>\n<p>这是比较困惑的地方：这不是说回调函数不会在 1000ms 后添加到调用栈中！它们在 1000ms 后添加到 <em>queue</em> 中。但这是一个队列，该函数必须等待轮到它。</p>\n<p>现在这是我们必须要等待的部分，事件循环做的唯一的任务：<strong>连接调用栈和队列</strong>。如果调用栈是空的，即之前所有函数都返回了值，已经从栈中弹出，那么队列中的第一个值出队列被加入调用栈。</p>\n<p><img src=\"/7e58f74b2b2116d7cb8ae573570df2a5/dequeue.gif\" alt=\"dequeue\"></p>\n<p>回调函数被加入调用栈，然后执行，返回值，最后中栈中弹出。</p>\n<p><img src=\"/55d383fd555ff564285059d89c8f4abd/new-item.gif\" alt=\"new item added to call stack\"></p>\n<p>通过之前的了解，来推断一下下面的结果：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'First'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">bar</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Second'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">baz</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Third'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">baz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>让我们来快速看一下执行上述代码，浏览器发生了什么：</p>\n<p><img src=\"/edca0b28d3de98f77da38d0f994beebd/demo.gif\" alt=\"demo\"></p>\n<ol>\n<li>我们调用 <code class=\"language-text\">bar</code>，<code class=\"language-text\">bar</code> 返回了 <code class=\"language-text\">setTimeout</code> 函数。</li>\n<li>我们传入 <code class=\"language-text\">setTimeout</code> 的回调函数添加到了 Web API，<code class=\"language-text\">setTimeout</code> 函数和 <code class=\"language-text\">bar</code> 函数从栈中弹出。</li>\n<li>计时器开始运行，于此同时 <code class=\"language-text\">foo</code> 被调用并输出 <code class=\"language-text\">First</code>。<code class=\"language-text\">foo</code> 返回（undefined），<code class=\"language-text\">baz</code> 被调用，回调函数被加入队列中。</li>\n<li><code class=\"language-text\">baz</code> 输出 <code class=\"language-text\">Third</code>。事件循环看到 <code class=\"language-text\">baz</code> 返回后的调用栈为空，回调函数被加入到调用栈中。</li>\n<li>回调函数输出 <code class=\"language-text\">Second</code>。</li>\n</ol>\n<h3>参考</h3>\n<p><a href=\"https://dev.to/lydiahallie/javascript-visualized-event-loop-3dif\">https://dev.to/lydiahallie/javascript-visualized-event-loop-3dif</a></p>","frontmatter":{"title":"【译】JavaScript 可视化之事件循环","date":"January 25, 2020","description":"事件循环以图形化的方式展示，方便理解"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"tags":["JavaScript Visualized","Event Loop"],"slug":"/javascript-visualized-event-loop/","previous":{"excerpt":"什么是变量提升？ 从概念的字面意义上说，“变量提升”意味着变量和函数的声明会在物理层面移动到代码的最前面，但这么说并不准确。实际上变量和函数声明在代码里的位置是不会动的，而是在编译阶段被放入内存中。(MDN) 提升的对象是定义的变量或函数（Declarations…","fields":{"slug":"/javascript-visualized-hoisting/"},"frontmatter":{"date":"January 28, 2020","description":"变量提升以图形化的方式展示，方便理解","title":"【译】JavaScript 可视化之变量提升","tags":["JavaScript Visualized","Hoisting"]}},"next":{"excerpt":"2019年平平淡淡的就这么度过了，本身没有太多值得回顾的，但是自从没有坚持继续记日记之后，好久没有花时间好好自我反省过了。 工作 全年主要在公司承担业务UI改版的工作，期间并没有亮眼的成绩，反而还造成了一些由于业务不熟悉导致的bug…","fields":{"slug":"/annual-summary/"},"frontmatter":{"date":"January 22, 2020","description":"年末总结与回顾","title":"2019年末总结","tags":["retrospective"]}}}}}