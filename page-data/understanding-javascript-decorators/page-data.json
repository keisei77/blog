{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/understanding-javascript-decorators/","result":{"data":{"site":{"siteMetadata":{"title":"学习随笔"}},"markdownRemark":{"id":"a6906d98-dd12-56ee-9bc5-5c8732911933","excerpt":"什么是装饰器 装饰器是“装饰函数（或方法）”的一种简称。它是一个通过修改传入的函数或方法的行为并返回一个新函数的函数。 我们可以在任何支持函数为一等公民的语言中实现装饰器，如 JavaScript。我们可以把函数赋值为变量或将它作为参数传递到下一个函数。有一些语言有定义和使用装饰器的特殊语法糖，其中 Python…","html":"<h2>什么是装饰器</h2>\n<p>装饰器是“装饰函数（或方法）”的一种简称。它是一个通过修改传入的函数或方法的行为并返回一个新函数的函数。</p>\n<p>我们可以在任何支持函数为一等公民的语言中实现装饰器，如 JavaScript。我们可以把函数赋值为变量或将它作为参数传递到下一个函数。有一些语言有定义和使用装饰器的特殊语法糖，其中 Python 的代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">cashify</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$$$$\"</span><span class=\"token punctuation\">)</span>\n        fn<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$$$$\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> wrap\n\n@cashify\n<span class=\"token keyword\">def</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello!\"</span><span class=\"token punctuation\">)</span>\n\nsayHello<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># $$$$</span>\n<span class=\"token comment\"># hello!</span>\n<span class=\"token comment\"># $$$$</span></code></pre></div>\n<p>我们来看一下以上代码。<code class=\"language-text\">cashify</code> 是一个装饰器：它接受一个函数参数，返回值也是一个函数。我们使用 Python 的 “pie” 语法来装饰我们的 <code class=\"language-text\">sayHello</code> 函数，与下面在 <code class=\"language-text\">sayHello</code> 后面执行的结果本质上是一样的：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello!\"</span><span class=\"token punctuation\">)</span>\n\nsayHello <span class=\"token operator\">=</span> cashify<span class=\"token punctuation\">(</span>sayHello<span class=\"token punctuation\">)</span></code></pre></div>\n<p>最终的结果是我们在我们所装饰的函数打印内容的前后打印了 <code class=\"language-text\">$</code> 符号。</p>\n<p>那么在介绍 ECMAScript 的装饰器时为什么使用了 Python 作为例子呢？</p>\n<ul>\n<li>Python 装饰器的概念相比 JS 来说更加直接，更好地作为基础来解释。</li>\n<li>JS 和 TypeScript 都使用了 Python 的 “pie” 语法来装饰类的方法和属性，它们视觉和语义上是相似的。</li>\n</ul>\n<p>相对来说 JS 的装饰器有哪些不同呢？</p>\n<h2>JS 装饰器和属性描述符</h2>\n<p>传递给 Python 装饰器的任何函数都作为参数装饰，JS 装饰器由于对象在 JS 中的特殊性需要更多的信息。\n对象在 JS 中有属性，并且属性对应各自的值:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> oatmeal <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  viscosity<span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n  flavor<span class=\"token punctuation\">:</span> <span class=\"token string\">'Brown Sugar Cinnamon'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>对于属性值，每个属性有一些其他背后的信息来定义如何工作的不同方面，被称为属性描述符：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span>oatmeal<span class=\"token punctuation\">,</span> <span class=\"token string\">'viscosity'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n{\n  configurable: true,\n  enumerable: true,\n  value: 20,\n  writable: true\n}\n*/</span></code></pre></div>\n<p>JS 会对属性的相关信息追踪：</p>\n<ul>\n<li><code class=\"language-text\">configurable</code> 决定属性的类型是否可以修改，是否可以从对象中删除。</li>\n<li><code class=\"language-text\">enumerable</code> 控制在枚举对象的属性（如 <code class=\"language-text\">Object.keys(oatmeal)</code> 或 <code class=\"language-text\">for 循环</code>）时是否可见。</li>\n<li><code class=\"language-text\">writable</code> 控制能否通过 <code class=\"language-text\">=</code> 操作符来赋值</li>\n<li><code class=\"language-text\">value</code> 是属性的值，这是我们平时最关心的一个属性。它可以是任何 JS 的类型。</li>\n</ul>\n<p>属性描述符也有另外两个属性，JS 把它们作为“访问描述符”（更常见的名称为：getters 和 setters）来对待：</p>\n<ul>\n<li><code class=\"language-text\">get</code> 是一个返回属性值的函数。</li>\n<li><code class=\"language-text\">set</code> 是一个接收一个值作为参数的函数，并把该值赋值给当前属性。</li>\n</ul>\n<h3>没有多余的装饰</h3>\n<p>JS 从 ES5 开始有了对属性描述符操作的 API。<code class=\"language-text\">Object.getOwnPropertyDescriptor</code> 和 <code class=\"language-text\">Object.defineProperty</code> 函数。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>oatmeal<span class=\"token punctuation\">,</span> <span class=\"token string\">'viscosity'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  writable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  value<span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 当尝试给 oatmeal.viscosity 赋新值时，它静默失败了</span>\noatmeal<span class=\"token punctuation\">.</span>viscosity <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>oatmeal<span class=\"token punctuation\">.</span>viscosity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => 20</span></code></pre></div>\n<p>我们可以写一个通用的 <code class=\"language-text\">decorate</code> 函数来更新任何对象的任何属性的描述符：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">decorate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> property<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> descriptor <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> property<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> property<span class=\"token punctuation\">,</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>descriptor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">decorate</span><span class=\"token punctuation\">(</span>oatmeal<span class=\"token punctuation\">,</span> <span class=\"token string\">'viscosity'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">desc</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  desc<span class=\"token punctuation\">.</span>configurable <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  desc<span class=\"token punctuation\">.</span>writable <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  desc<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> desc<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"title":"JavaScript 装饰器","date":"January 05, 2020","description":"JavaScript 装饰器入门介绍"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"tags":["JavaScript Decorator"],"slug":"/understanding-javascript-decorators/","previous":null,"next":{"fields":{"slug":"/docker-overview/"},"frontmatter":{"title":"Docker 简介","tags":["docker"]}}}}}