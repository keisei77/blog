{"componentChunkName":"component---src-templates-single-tag-tsx","path":"/tags/JavaScript Visualized","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"posts":[{"node":{"excerpt":"generator 函数不同于通常的函数，运行就结束。我们可以任意暂停函数的执行，并在合适时机输出。 通过在  关键字后面添加  创建 generator 函数。 generator 函数与普通函数实际上工作方式完全不同： 调用 generator…","fields":{"slug":"/javascript-visualized-generator-function/"},"frontmatter":{"date":"February 05, 2020","description":"迭代器和迭代函数以图形化的方式展示，方便理解","title":"【译】JavaScript 可视化之迭代器和迭代函数","tags":["JavaScript Visualized","Generator","Iterator"]}}},{"node":{"excerpt":"当我们对字符串，数组或对象使用内置的方法或属性如 ，， 等时，这是通过 原型继承（prototypal inheritance…","fields":{"slug":"/javascript-visualized-prototypal-inheritance/"},"frontmatter":{"date":"February 04, 2020","description":"原型继承以图形化的方式展示，方便理解","title":"【译】JavaScript 可视化之原型继承","tags":["JavaScript Visualized","Prototypal Inheritance"]}}},{"node":{"excerpt":"作为 JavaScript 开发人员，我们有必要了解关于 JavaScript 引擎的基础，它是如何将 JS 代码编译成机器码的。以下内容会以 V8 引擎为主。 HTML 解析器当遇到  标签时，源代码会从该 source 路径从网络，缓存或者安装的 service worker…","fields":{"slug":"/javascript-visualized-engine/"},"frontmatter":{"date":"February 03, 2020","description":"执行引擎以图形化的方式展示，方便理解","title":"【译】JavaScript 可视化之执行引擎","tags":["JavaScript Visualized","Engine"]}}},{"node":{"excerpt":"本文假设读者已了解执行上下文的基本概念。 我们首先来看以下代码： 我们调用  函数时，返回了一串包含 ,  和  变量的字符串：。但是  函数内并没有声明变量 `city，它是怎么得到的呢？ JavaScript…","fields":{"slug":"/javascript-visualized-scope/"},"frontmatter":{"date":"February 01, 2020","description":"作用域链以图形化的方式展示，方便理解","title":"【译】JavaScript 可视化之作用域链","tags":["JavaScript Visualized","Scope Chain"]}}},{"node":{"excerpt":"什么是变量提升？ 从概念的字面意义上说，“变量提升”意味着变量和函数的声明会在物理层面移动到代码的最前面，但这么说并不准确。实际上变量和函数声明在代码里的位置是不会动的，而是在编译阶段被放入内存中。(MDN) 提升的对象是定义的变量或函数（Declarations…","fields":{"slug":"/javascript-visualized-hoisting/"},"frontmatter":{"date":"January 28, 2020","description":"变量提升以图形化的方式展示，方便理解","title":"【译】JavaScript 可视化之变量提升","tags":["JavaScript Visualized","Hoisting"]}}},{"node":{"excerpt":"事件循环大概是每个 JavaScript 初学者都会感到困惑的概念。本文将通过可视化的方式来尽量对该概念作详细的解释。 我们来首先了解一下什么是事件循环，以及我们为什么要关心它？ JavaScript…","fields":{"slug":"/javascript-visualized-event-loop/"},"frontmatter":{"date":"January 25, 2020","description":"事件循环以图形化的方式展示，方便理解","title":"【译】JavaScript 可视化之事件循环","tags":["JavaScript Visualized","Event Loop"]}}}],"tagName":"JavaScript Visualized"}}}