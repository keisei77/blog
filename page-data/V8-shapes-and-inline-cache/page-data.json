{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/V8-shapes-and-inline-cache/","result":{"data":{"site":{"siteMetadata":{"title":"学习随笔"}},"markdownRemark":{"id":"cb85d825-68e7-519f-b481-d4868d62dd26","excerpt":"JavaScript 引擎管道 当加载到我们所写的 JavaScript 代码，JavaScript 引擎开始解析源代码，并把它转换成抽象语法树（AST）。基于 AST，解释器开始工作并转换成字节码。此时引擎开始真正执行我们的 JavaScript 代码。 js engine pipeline…","html":"<h2>JavaScript 引擎管道</h2>\n<p>当加载到我们所写的 JavaScript 代码，JavaScript 引擎开始解析源代码，并把它转换成抽象语法树（AST）。基于 AST，解释器开始工作并转换成字节码。此时引擎开始真正执行我们的 JavaScript 代码。</p>\n<p><img src=\"/55263e94b3250c77560ffe9770630a34/js-engine-pipeline.svg\" alt=\"js engine pipeline\"></p>\n<p>为了让代码运行得更快，字节码可以与分析数据一起发送到优化编译器，基于分析到的数据做出一些假设，然后编译出高度优化的机器码。</p>\n<p>如果在某个节点的假设出错，优化编译器会造成负优化，并回退到解释器。</p>\n<h3>解释器/编译器 在 JavaScript 引擎中的管道</h3>\n<p>我们来放大管道流中真正执行 JavaScript 代码的部分，即代码被解释和优化，并解决主要引擎中存在的差异的地方。简单来讲，这里管道流包含解释器和优化编译器。解释器快速将源码生成未优化的字节码，优化编译器花更多一点的时间生成高度优化的机器码。</p>\n<p><img src=\"/986a5bf438f0396c4d357fbe6823bfaa/interpreter-optimizing-compiler.svg\" alt=\"interpreter optimizing compiler\"></p>\n<p>这种通用的管道流 V8 在 Chrome 和 Node.js 中是如何工作的：</p>\n<p><img src=\"/8a9c248062e5984da280e1e128baf314/interpreter-optimizing-compiler-v8.svg\" alt=\"interpreter optimizing compiler v8\"></p>\n<p>解释器在 V8 中被称作点火器，它的作用是生成和执行字节码。当开始执行字节码时，它会收集分析的数据，用来加速未来的执行速度。当一个函数经常被执行，就会变成一个热函数，这部分字节码和分析的数据会被传递给涡轮风扇—我们的优化编译器，基于分析的数据来生成高度优化的机器码。</p>\n<h2>JavaScript 对象模型</h2>\n<p>让我们来看一下 JavaScript 引擎共性的方面是如何实现的。例如，JavaScript 对象模型是如何实现的，有哪些方式来加快属性的访问。</p>\n<p>ECMAScript 规范定义了所有对象都是字典，<a href=\"https://tc39.es/ecma262/#sec-property-attributes\">属性的键值</a>都是字符串类型。</p>\n<p><img src=\"/2ad718f2149bab498cd22aa53c67ac6f/object-model.svg\" alt=\"object model\"></p>\n<p>除了 <code class=\"language-text\">[[Value]]</code> 以外，规范还定义了如下属性：</p>\n<ul>\n<li><code class=\"language-text\">[[Writable]]</code> 决定了属性可以重新赋值，</li>\n<li><code class=\"language-text\">[[Enumerable]]</code> 决定了属性可以通过 <code class=\"language-text\">for-in</code> 枚举，</li>\n<li><code class=\"language-text\">[[Configurable]]</code> 决定了属性可以被删除。</li>\n</ul>\n<p>双方括号看起来新颖，这是规范用来表示属性的并且不直接暴露给 JavaScript。可以通过 <code class=\"language-text\">Object.getOwnPropertyDescriptor</code> API 来获取对象的属性描述符。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> object <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> foo<span class=\"token punctuation\">:</span> <span class=\"token number\">42</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">,</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// -> { value: 42, writable: true, enumerable: true, configurable: true }</span></code></pre></div>\n<p>数组又是如何定义的呢？可以把数组理解为一种特殊的对象。其中一个不同点是数组对索引有特殊的处理逻辑。数组索引在 ECMAScript 规范中是特殊术语。数组在 JavaScript 中允许最多 2³²−1 个元素。数组索引是在 0 至 2³²−2 的任意有效的整数。</p>\n<p>另一个不同点是数组有一个魔法的<code class=\"language-text\">length</code>属性。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narray<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token comment\">// -> 2</span>\narray<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">;</span>\narray<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token comment\">// -> 3</span></code></pre></div>\n<p>在这个例子中数组创建时 <code class=\"language-text\">length</code> 为 <code class=\"language-text\">2</code>，当我们给索引 <code class=\"language-text\">2</code> 赋值时，<code class=\"language-text\">length</code> 属性自动更新了。</p>\n<p>JavaScript 定义数组和定义对象相似，所有键值包括索引值都是明确的字符串类型。数组的第一个元素存在键 <code class=\"language-text\">0</code> 的下面。</p>\n<p><img src=\"/6d34cbceadebfc3ccb045d3eb16eba87/array-1.svg\" alt=\"array 1\"></p>\n<p><code class=\"language-text\">length</code> 只是另一个不可枚举不可删除的属性而已。</p>\n<p>一旦一个元素加入数组，JavaScript 会自动更新 <code class=\"language-text\">length</code> 属性的 <code class=\"language-text\">[[Value]]</code> 值。</p>\n<p>一般来说，数组的行为与对象非常相似。</p>\n<h2>优化属性访问</h2>\n<p>现在让我们来看一下引擎如何让对象工作的高效。</p>\n<p>在 JavaScript 程序中，访问对象属性是最常见的操作。对于引擎来说让属性更快访问至关重要。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> object <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  foo<span class=\"token punctuation\">:</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span>\n  baz<span class=\"token punctuation\">:</span> <span class=\"token string\">'qux'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 这里我们访问 object 的 foo 属性。</span>\n<span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Shapes</h3>\n<p>在 JavaScript 程序中，多个对象拥有相同的属性是非常常见的。这样的对象有相同的形状（shape）。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> object1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> object2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// object1 和 object2 有同样的 shape</span></code></pre></div>\n<p>对同样 shape 的对象访问同一属性也是很常见的。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">logX</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">object</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> object1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> object2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">logX</span><span class=\"token punctuation\">(</span>object1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">logX</span><span class=\"token punctuation\">(</span>object2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>考虑到这一点，JavaScript 引擎可以基于对象的 shape 来优化对象属性的访问速度。</p>\n<p>假设一个对象上有属性 <code class=\"language-text\">x</code> 和 <code class=\"language-text\">y</code> ，它用之前讨论过的字典数据结构表示：包含了字符串的 key，这些 key 的指针指向对应的元属性。</p>\n<p><img src=\"/2ad718f2149bab498cd22aa53c67ac6f/object-model-1.svg\" alt=\"object model\"></p>\n<p>如果访问 <code class=\"language-text\">object.y</code> ，引擎会在 <code class=\"language-text\">JSObject</code> 中寻找键 <code class=\"language-text\">y</code> ，然后加载对应的属性元数据，最后返回 <code class=\"language-text\">[[Value]]</code> 。</p>\n<p>属性元数据在内存中是怎么存储的呢？我们应该把它们作为 <code class=\"language-text\">JSObject</code> 的一部分存储呢？如果我们在将来会有更多的同 shape 的对象，那么作为 <code class=\"language-text\">JSObject</code> 的一部分保存全部的字典数据是浪费的。作为优化，引擎会单独保存对象的 <code class=\"language-text\">Shape</code> 数据。</p>\n<p><img src=\"/e961dd07670fe48f1d6154fcb05bfc42/shape-1.svg\" alt=\"shape 1\"></p>\n<p><code class=\"language-text\">Shape</code> 包含除了 <code class=\"language-text\">[[Value]]</code> 之外的所有的元属性数据，并且 <code class=\"language-text\">Shape</code> 会保存属性值在 <code class=\"language-text\">JSObject</code> 中的偏移量，因此 JavaScript 引擎知道去哪里找到这些值。每个同一 shape 的 <code class=\"language-text\">JSObject</code> 指向这个 <code class=\"language-text\">Shape</code> 实例。现在每个 <code class=\"language-text\">JSObject</code> 只需要保存对对象唯一的属性值。</p>\n<p><img src=\"/836c5d03087c8fd4323793df862ddeb6/shape-2.svg\" alt=\"shape 2\"></p>\n<p>当我们有多个对象时好处显而易见，无论有多少对象，只要它们拥有同样的 shape，我们只需要保存一次 shape 和属性信息。</p>\n<h3>过渡链和树（Transition chains and trees）</h3>\n<p>假设现在一个对象有一个确定的 shape，当我们此时在该对象上新增一个属性时，引擎该如何找到新的 shape？</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> object <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nobject<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\nobject<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这种 shape 形式在引擎中称为过渡链（transition chains）感觉这里还是原生比较直观。</p>\n<p><img src=\"/b32af721e8b02099051effa12ced05ac/shape-chain-1.svg\" alt=\"shape chain 1\"></p>\n<p>对象 <code class=\"language-text\">o</code> 开始时没有任何属性，所以最初指向空 shape。第二步将值为 <code class=\"language-text\">5</code> 的 <code class=\"language-text\">x</code> 属性添加到对象 <code class=\"language-text\">o</code> 时，JavaScript 引擎会过渡到一个包含属性 <code class=\"language-text\">x</code> 的 shape，并且值 <code class=\"language-text\">5</code> 会添加到 <code class=\"language-text\">JSObject</code> 偏移量 <code class=\"language-text\">0</code> 的位置。同理，当新增 <code class=\"language-text\">y</code> 属性时，引擎会过渡到包含 <code class=\"language-text\">x</code> 和 <code class=\"language-text\">y</code> 的另一个 shape，并将 <code class=\"language-text\">6</code> 添加到 <code class=\"language-text\">JSObject</code> 偏移量 <code class=\"language-text\">1</code> 的位置。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">注意：属性添加的顺序会影响shape。如 { x: 4undefined y: 5 } 和 { y: 5undefined x: 4 } 的 shape 不同。</code></pre></div>\n<p>我们不需要为每个 <code class=\"language-text\">Shape</code> 保存全部的属性。相反，每个 <code class=\"language-text\">Shape</code> 只需要知道它自己新的属性。例如，我们不需要在最后一个 <code class=\"language-text\">Shape</code> 中存储 <code class=\"language-text\">x</code> 属性，因为它可以在之前的链上找到。为了达到这个目的，每个 <code class=\"language-text\">Shape</code> 需要指回之前的 shape ：</p>\n<p><img src=\"/84acac33e689906b5eafed489f5fe68f/shape-chain-2.svg\" alt=\"shape chain 2\"></p>\n<p>当代码中访问 <code class=\"language-text\">o.x</code> 时，引擎会向上遍历 transition chain 直到找到拥有 <code class=\"language-text\">x</code> 属性的 <code class=\"language-text\">Shape</code> 。</p>\n<p>如果此时有两个空对象，我们分别向对象中添加不同的属性：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> object1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nobject1<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> object2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nobject2<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这种情况我们会将树进行分叉形成 transition tree 而不再是一条链。</p>\n<p><img src=\"/7285fe16e0ded670a519bd0470c3a3d6/shape-tree.svg\" alt=\"shape tree\"></p>\n<p>这里我们创建了空对象 <code class=\"language-text\">a</code> ， 并且向其添加了 <code class=\"language-text\">x</code> 属性。最终创建了包含一个值的 <code class=\"language-text\">JSObject</code> 和 两个 <code class=\"language-text\">Shape</code>s ：一个空 shape 和一个仅包含 <code class=\"language-text\">x</code> 属性信息的 shape。</p>\n<p>我们也创建了对象 <code class=\"language-text\">b</code> ，并增加了属性 <code class=\"language-text\">y</code>。结果产生了两条 shape 链，总共三个 shape。</p>\n<p>这是否意味着我们总是从空 shape 开始？并非如此。引擎会对已经拥有属性的对象字面量做优化。我们要么从空对象增加 <code class=\"language-text\">x</code> 属性，要么有对象已经存在 <code class=\"language-text\">x</code> 属性：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> object1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nobject1<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> object2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">:</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>在对象 <code class=\"language-text\">object1</code> 中，我们首先创建空 shape，并过渡到拥有 <code class=\"language-text\">x</code> 属性的 shape。\n对象 <code class=\"language-text\">object2</code> 可以直接从之前已经包含 <code class=\"language-text\">x</code> 的 shape 创建，不需要从空对象开始然后过渡。</p>\n<p><img src=\"/14f49d5717ffc330ab2e9f9e47faa16c/empty-shape-bypass.svg\" alt=\"empty shape bypass\"></p>\n<p>包含 <code class=\"language-text\">x</code> 属性的对象从包含 <code class=\"language-text\">x</code> 的 shape 开始，高效的跳过了空 shape。这个优化缩短了过渡链并使字面构造对象更加高效。</p>\n<p>下面是一个三维点对象的表示：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> point <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\npoint<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\npoint<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\npoint<span class=\"token punctuation\">.</span>z <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>根据我们前面所讲的，这会在内存中创建 3 个 shape（不包括空 shape）。为了访问 <code class=\"language-text\">x</code> 属性，必须从链尾开始遍历寻找包含 <code class=\"language-text\">x</code> 的 shape。</p>\n<p><img src=\"/1069bb39d70e1f1270fe887fb1637a06/shapetable-1.svg\" alt=\"shapetable\"></p>\n<p>如果我们经常作此操作，会变得很慢，尤其是当对象有很多属性时。寻找属性的时间复杂度是 O（n）,即线性的复杂度。为了加快查询效率，JavaScript 引擎增加了一个 <code class=\"language-text\">ShapeTable</code> 的数据结构。这个 <code class=\"language-text\">ShapeTable</code> 是一个字典，匹配键值和对应的 <code class=\"language-text\">Shape</code>s 。</p>\n<p><img src=\"/5185c0139aa8e3cc3055648ef526d2e5/shapetable-2.svg\" alt=\"shapetable-2\"></p>\n<p>现在我们又回到了字典表查找。这是我们开始添加 <code class=\"language-text\">Shape</code>s 的地方。所以我们为什么还要<code class=\"language-text\">Shape</code>s ？</p>\n<p>原因是 shapes 可以启用另一个优化方案：<code class=\"language-text\">Inline Caches</code>。</p>\n<h3>Inline Caches (ICs)</h3>\n<p><code class=\"language-text\">Shape</code>s 背后真正的目的是内联缓存（ICs）。ICs 是使 JavaScript 快速运行的关键因素。JavaScript 引擎使用 ICs 来记录去哪里找对象的属性的信息，减少查询次数的开销。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">o</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> o<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>当我们在编译器中执行时，生成如下的字节码：</p>\n<p><img src=\"/40a0bcd658e50b7512132eabe579f0bd/ic-1.svg\" alt=\"ic 1\"></p>\n<p><code class=\"language-text\">get_by_id</code> 指令从第一个参数 <code class=\"language-text\">arg1</code> 加载 <code class=\"language-text\">x</code> 属性，并将结果保存在 <code class=\"language-text\">loc0</code> 位置。第二条指令返回我们存在 <code class=\"language-text\">loc0</code> 中的数据。</p>\n<p>JSC 还将内联缓存嵌入包含两个未初始化插槽的 <code class=\"language-text\">get_by_id</code> 指令中。</p>\n<p><img src=\"/7f8e0551ee220f9a9c850ddc7731fe0c/ic-2.svg\" alt=\"ic 2\"></p>\n<p>现在我们调用<code class=\"language-text\">getX</code> 函数，并传参 <code class=\"language-text\">{ x: &#39;a&#39; }</code> ，这个对象有一个拥有 <code class=\"language-text\">x</code> 属性的 shape，并且该 <code class=\"language-text\">Shape</code> 保存了偏移量和 <code class=\"language-text\">x</code> 的元属性数据。当首次执行这个函数时，<code class=\"language-text\">get_by_id</code> 指令开始查找属性 <code class=\"language-text\">x</code>，最终找到该值保存在偏移量 <code class=\"language-text\">0</code> 的位置。</p>\n<p><img src=\"/bfc0cd727c60f503382d21c0fe236545/ic-3.svg\" alt=\"ic 3\"></p>\n<p>嵌入 <code class=\"language-text\">get_by_id</code> 指令的内联缓存会记录 shape 和属性被查到的偏移量：</p>\n<p><img src=\"/7eb62f1dfed740115e04ffcef6788128/ic-4.svg\" alt=\"ic 4\"></p>\n<p>在随后的运行，内联缓存只需要比较 shape，如果相同就会直接返回记录的偏移量的值。特别是如果 JavaScript 引擎发现对象的 shape 在内联缓存中已经记录，不再需要去查询属性信息，这步耗时的操作会完全跳过。</p>\n<h2>高效存储数组</h2>\n<p>数组保存的属性又称为索引，对应的值称为数组元素。在每个单个数组中保存每个数组元素的属性信息是浪费内存的，JavaScript 引擎默认情况下索引值的属性是可写、可遍历、可删除，并且将数组元素和其他命名属性分开存储。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'#jsconfeu'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>引擎保存了数组长度 <code class=\"language-text\">1</code>，并指向包含偏移量和 <code class=\"language-text\">length</code> 属性的 <code class=\"language-text\">Shape</code>。</p>\n<p><img src=\"/59616921d42c4e5b04c71f3f6887b9de/array-shape.svg\" alt=\"array shape\"></p>\n<p>和之前看到的一样，但是数组的元素值存在哪里呢？</p>\n<p><img src=\"/0d617beeb57476b7d2867dada081498e/array-elements.svg\" alt=\"array elements\"></p>\n<p>每个数组都有一个单独的元素备份库，包含了所有元素的值。JavaScript 引擎不需要为数组元素保存任何属性信息，因为通常它们都是可写、可枚举、可删除的。</p>\n<h2>收获与总结</h2>\n<p>我们学习到了 JavaScript 引擎是如何存储对象和数组的，<code class=\"language-text\">Shape</code>s 和 <code class=\"language-text\">ICs</code> 是如何对它们常用的操作做出优化的。基于这些知识，我们总结了以下可以提高性能的代码：</p>\n<ul>\n<li>总是按同一种方式初始化对象，这样就不会产生多种不同的 shape；</li>\n<li>不要试图修改数组的属性信息，否则存储和操作会降低性能。</li>\n</ul>\n<h2>参考</h2>\n<p><a href=\"https://mathiasbynens.be/notes/shapes-ics\">https://mathiasbynens.be/notes/shapes-ics</a></p>","frontmatter":{"title":"JavaScript 引擎基础：Shapes 和 Inline Caches","date":"November 18, 2019","description":"了解 JavaScript 引擎基本的工作原理，可以帮助我们写出更加高性能的代码。"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"tags":["javascript engines","V8","shapes","inline caches","fundamentals"],"slug":"/V8-shapes-and-inline-cache/","previous":{"fields":{"slug":"/react-fiber-architecture/"},"frontmatter":{"title":"React Fiber 架构","tags":["React","Fiber","Architecture","diff"]}},"next":{"fields":{"slug":"/V8-performance-cliff/"},"frontmatter":{"title":"React源码中导致V8性能断崖下滑的真相","tags":["React","V8","representations","optimize"]}}}}}