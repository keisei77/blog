{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/basic-bash-script/","result":{"data":{"site":{"siteMetadata":{"title":"学习随笔"}},"markdownRemark":{"id":"853025a1-8a87-59bd-991c-282798d8a46f","excerpt":"前言 最近深感能力不足，于是开始了每日的 leetcode 刷题。为了以后复习方便，单独开了一个仓库进行存档。每道题目为单个 md 文件，commit…","html":"<h3>前言</h3>\n<p>最近深感能力不足，于是开始了每日的 leetcode 刷题。为了以后复习方便，单独开了一个<a href=\"https://github.com/keisei77/algorithm-practice\">仓库</a>进行存档。每道题目为单个 md 文件，commit 记录为题目的名称 <code class=\"language-text\">:white_check_mark: 347. Top K Frequent Elements.md</code>。</p>\n<h3>建档步骤枯燥且重复</h3>\n<p>起初决定以每道题目的名称作为文件名，内容的标题也是题目名，即 <code class=\"language-text\"># 347. Top K Frequent Elements</code>。</p>\n<p>由于是新增文件，所以 <code class=\"language-text\">git status</code> 输出的内容为：</p>\n<div class=\"gatsby-highlight\" data-language=\"txt\"><pre class=\"language-txt\"><code class=\"language-txt\">On branch master\nYour branch is up to date with &#39;origin/master&#39;.\n\nUntracked files:\n  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)\n\n        347. Top K Frequent Elements.md\n\nnothing added to commit but untracked files present (use &quot;git add&quot; to track)</code></pre></div>\n<p>这种格式的文本显然很难去提取当前需要提交的文件名，所以需要去了解 <code class=\"language-text\">git status</code> 有没有一个标准化的输出格式。</p>\n<h3>探索解决方案</h3>\n<p>在考虑通过脚本解决上述问题时，考虑到新增和提交是两个步骤，所以分为两个独立的脚本。</p>\n<h4>新增脚本</h4>\n<p>首先新增文件的脚本比较简单，就是通过输入文件名，以此来生成文件和标题：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token builtin class-name\">set</span> -e\n\n<span class=\"token assign-left variable\">problem</span><span class=\"token operator\">=</span><span class=\"token variable\">$@</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$@</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Please enter the problem name.\"</span>\n<span class=\"token keyword\">else</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"# <span class=\"token variable\">$problem</span>\"</span> <span class=\"token operator\">>></span> <span class=\"token string\">\"<span class=\"token variable\">$problem</span>.md\"</span>\n<span class=\"token keyword\">fi</span></code></pre></div>\n<p>由于对 <code class=\"language-text\">bash</code> 还是比较陌生，所以可能水平有些次。不过虽然看起来很简单，但是这里有一个技巧：就是 <code class=\"language-text\">$@</code> 会拿到执行该脚本时传入的所有 arguments。为什么不能拿 <code class=\"language-text\">$1</code> 来获取题目呢？这就是遇到的一个坑点：在执行脚本时跑的命令是：<code class=\"language-text\">./bin/add_problem.sh 347. Top K Frequent Elements.md</code>，结果 <code class=\"language-text\">$1</code> 的值为 <code class=\"language-text\">347.</code> 而不是预期的整个标题内容。</p>\n<h4>提交脚本</h4>\n<p>通过获取当前待提交的文件名，并提交推送至远程仓库：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token builtin class-name\">set</span> -e\n<span class=\"token comment\"># https://stackoverflow.com/a/5238537/6796500</span>\n<span class=\"token assign-left variable\">file</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">git</span> status --porcelain <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> s/^<span class=\"token punctuation\">..</span>.//<span class=\"token variable\">)</span></span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$file</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"No files changed.\"</span>\n<span class=\"token keyword\">else</span>\n    <span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>\n    <span class=\"token function\">git</span> commit -m <span class=\"token string\">\":white_check_mark: <span class=\"token variable\">$file</span>\"</span>\n    <span class=\"token function\">git</span> push\n<span class=\"token keyword\">fi</span></code></pre></div>\n<p>这里最重要的一点就是拿到所有变更的文件名，经过搜索发现果然有人提过这个需求：<a href=\"https://stackoverflow.com/a/5238537/6796500\">https://stackoverflow.com/a/5238537/6796500</a>。</p>\n<p>那么就好办了，直接把拿到的文件名加入到 commit message 中，然后执行 git 操作。</p>\n<h3>总结</h3>\n<p>虽然目前基本满足了个人需求，但是这里还有一点遗憾，就是 <code class=\"language-text\">git status</code> 可以拿到多个变更文件。本来可以通过 <code class=\"language-text\">for loop</code> 来提交多个 commit，但是还是遇到了先前的问题：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">347. Top K Frequent Elements.md\n78. Subsets.md</code></pre></div>\n<p>这里变更了两个文件：<code class=\"language-text\">$files</code>，但是 <code class=\"language-text\">for $file in $files</code> 得到的 <code class=\"language-text\">$file</code> 却是：<code class=\"language-text\">347.</code>，<code class=\"language-text\">Top</code>，<code class=\"language-text\">K</code> 等。这是目前待解决的问题。如有解决方案，还请帮忙提供解决方式：<a href=\"https://github.com/keisei77/algorithm-practice/issues/1\">https://github.com/keisei77/algorithm-practice/issues/1</a>，不胜感激。</p>\n<p>通过写简单的脚本，确实提高了部分效率，也对 bash 的使用有了新的认知。</p>","frontmatter":{"title":"bash 脚本入门","date":"July 31, 2020","description":"学习基本的 bash 脚本来提高自动化能力"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"tags":["Bash"],"slug":"/basic-bash-script/","previous":{"excerpt":"","fields":{"slug":"/react-renderimg-process/"},"frontmatter":{"date":"August 06, 2020","description":"本文主要讲述 React 的渲染过程，并尽量剖析部分源码，以及了解有哪些方法工具避免不必要的重渲染。","title":"React 渲染过程概述","tags":["React","optimize"]}},"next":{"excerpt":"前言 Facebook.com 在 2004 年发布时还是简单的服务端渲染的 PHP…","fields":{"slug":"/rebuild-tech-stack-facebook/"},"frontmatter":{"date":"June 19, 2020","description":"本文主要介绍 Facebook.com 新网站的技术栈的细节","title":"【译】Facebook.com 新网站的技术栈","tags":["Tech Stack"]}}}}}