{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/watch-external-files-webpack-plugin/","result":{"data":{"site":{"siteMetadata":{"title":"学习随笔"}},"markdownRemark":{"id":"dcb25b40-beaf-529e-a8ea-13de9627976b","excerpt":"背景 最近几个月的工作都以移动端为主，主要的工作内容是将 PC 端已有的核心业务移植到 Mobile…","html":"<h3>背景</h3>\n<p>最近几个月的工作都以移动端为主，主要的工作内容是将 PC 端已有的核心业务移植到 Mobile 端。那么就遇到了相同的业务逻辑是再实现一套还是直接复用原有的逻辑呢？作为业务方，我们肯定是希望能复用的复用，减少额外的工作量，另外后期的维护也会比较轻松。即便将来出现了产品逻辑或交互上的差异，到时候再拆分也是可以的。所以我们的结论是 PC 端与 Mobile 端为两个平行目录，但是在执行打包命令时会先将 PC 端文件目录同步到 Mobile 下的 <code class=\"language-text\">plugin</code> 目录，用到了哪段逻辑，就引用 <code class=\"language-text\">plugin/\\*</code> 下的文件。</p>\n<h3>痛点</h3>\n<p>在本地开发过程中，当修改了 PC 目录下某个文件，如果需要触发 webpack 打包，需要手动将变更的该文件 copy 到上述 <code class=\"language-text\">plugin</code> 目录下。PS: 这里的 webpack 打包是在 Mobile 的目录下执行的。</p>\n<h3>初步方案</h3>\n<p>有同事编写了一个轻量的 node 脚本，如当改完 common 目录下某个文件时，手动执行 <code class=\"language-text\">npm run sync:plugin common</code>，那么 common 目录下的所有文件会复制到 <code class=\"language-text\">plugin</code> 目录下。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// copy-to-mobile.js</span>\n\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> childprocess <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'child_process'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> module <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> cmd <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">cp </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>module<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> mobile/plugin/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>module<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\nchildprocess<span class=\"token punctuation\">.</span><span class=\"token function\">execSync</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这在开发初期尚可接受，后来业务越来越多，需要改动的包也越多，来回 sync 各个包费时费力。有没有办法可以自动化呢？</p>\n<h3>能自动化的指令就不要人工参与</h3>\n<p>带着上述的疑问，前去搜索引擎搜索了一番，没有找到合适的解决方案。有些 webpack 插件做到了监听外部文件，但是缺少回调函数的执行，我们这里的需求是文件变动后要复制到需要打包的目录下。</p>\n<p>所以只能手动实现一个 webpack 插件。过程倒还算轻松，主要是需要了解插件的原理，了解 webpack 编译的生命周期，在对应的阶段注入 hook 就好了。先来看代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> childprocess <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'child_process'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 以当前目录找到PC端的src路径</span>\n<span class=\"token keyword\">const</span> baseDir <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">../../../../app</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> pluginDirs <span class=\"token operator\">=</span> childprocess<span class=\"token punctuation\">.</span><span class=\"token function\">execSync</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">ls </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>baseDir<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 找出所有PC目录下的各个模块</span>\n<span class=\"token keyword\">const</span> plugins <span class=\"token operator\">=</span> pluginDirs\n  <span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>Boolean<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pluginName</span> <span class=\"token operator\">=></span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>baseDir<span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>pluginName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/src</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AutoCopyPlugin</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">compiler</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 在编译后异步执行的 hook</span>\n    compiler<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>afterCompile<span class=\"token punctuation\">.</span><span class=\"token function\">tapAsync</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">'add-extra-watch-dirs'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">(</span><span class=\"token parameter\">compilation<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 找出当前编译的上下文依赖并加入 PC 下的 plugin 目录</span>\n        <span class=\"token keyword\">const</span> contextDependencies <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>compilation<span class=\"token punctuation\">.</span>contextDependencies<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>\n          plugins\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        contextDependencies<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// 注意 compilation.contextDependencies 实际是 Set 实例，所以这里用 add 进行添加</span>\n          compilation<span class=\"token punctuation\">.</span>contextDependencies<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 监听模式下，在下次编译前执行的异步 hook</span>\n    compiler<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>watchRun<span class=\"token punctuation\">.</span><span class=\"token function\">tapAsync</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">'add-extra-watch-dirs'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">(</span><span class=\"token parameter\">compiler<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// 这是最关键的地方，mtimes 能够给出哪个文件产生了变动以及变更时的时间戳</span>\n          <span class=\"token keyword\">const</span> fileWatcher <span class=\"token operator\">=</span> compiler<span class=\"token punctuation\">.</span>watchFileSystem<span class=\"token punctuation\">.</span>watcher<span class=\"token punctuation\">.</span>mtimes<span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">const</span> changedFiles <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n          Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>fileWatcher<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">sourceFile</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 判断文件是否是属于 PC 目录下的，是则加入待复制列表</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sourceFile<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span>baseDir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              changedFiles<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>sourceFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token comment\">// 根据原文件变更路径，构造 Mobile 端对应目录</span>\n              <span class=\"token keyword\">const</span> distFile <span class=\"token operator\">=</span> sourceFile\n                <span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/app/'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/envloader/mobile/plugins/app/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token comment\">// 执行复制命令</span>\n              <span class=\"token keyword\">const</span> cmd <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">cp </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>sourceFile<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>distFile<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n              childprocess<span class=\"token punctuation\">.</span><span class=\"token function\">execSync</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n          <span class=\"token comment\">// 当有文件变更时，控制台输出对应变更的文件</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>changedFiles<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'同步成功: '</span> <span class=\"token operator\">+</span> changedFiles<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>在 webpack.config.js 中引入 <code class=\"language-text\">new AutoCopyPlugin()</code>，然后在 watch 模式下执行，就能愉快的写代码了。这里还有一个好处是，相比手动同步，我们只需要同步变更的文件而不是整个目录，这对提高编译速度也有一定帮助。</p>\n<h3>总结</h3>\n<p>经过一番折腾，总算是能够做出一个可用的版本了。虽然代码目前缺少抽象，不能够很好的移植，但是最大的收获还是在于探索的过程。遇到问题时，尽量考虑能不能通过工具来解决，还有就是不了解的地方要多翻文档。在编写 webpack 插件时还有个痛点是，写的代码在 node 环境下执行，调试起来不是特别方便。所以预定下一期文章是如何愉快地调试 node 代码。</p>","frontmatter":{"title":"webpack 监听外部文件变更","date":"September 10, 2020","description":"本文将介绍当需要根据外部文件变更触发编译时，如何通过编写插件来解决该问题。"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"tags":["Browser process","navigation"],"slug":"/watch-external-files-webpack-plugin/","previous":null,"next":{"excerpt":"前言 前段时间测试同学找我看了一个问题，客户环境某详情页打开时，浏览器当前页就会卡住，控制台没有报错，无法进行任何操作，而只有该 id 的详情页有问题。遇到这种情况，首先想到的是某段代码出现了内存泄漏，但是线上环境代码是混淆后的，sourcemap…","fields":{"slug":"/react-renderimg-process/"},"frontmatter":{"date":"September 08, 2020","description":"本文从一个bug导致 React 重渲染的发生，了解有哪些方法工具避免不必要的重渲染。","title":"React 重渲染问题记录","tags":["React","optimize"]}}}}}