{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/getting-started-react-dom-server-render/","result":{"data":{"site":{"siteMetadata":{"title":"学习随笔"}},"markdownRemark":{"id":"618063ab-c708-590c-b3ec-e6a7a719d8bd","excerpt":"前言 当我们需要 React 服务端渲染时，需要了解  这个对象。它能够使组件渲染成静态的 html 标记。 ReactDOMServer 提供了四个方法，其中  和  可以在浏览器和 node 环境中运行， 和  由于使用了 node 中特有的 stream…","html":"<h3>前言</h3>\n<p>当我们需要 React 服务端渲染时，需要了解 <a href=\"https://reactjs.org/docs/react-dom-server.html#rendertostring\"><code class=\"language-text\">ReactDOMServer</code></a> 这个对象。它能够使组件渲染成静态的 html 标记。</p>\n<p>ReactDOMServer 提供了四个方法，其中 <a href=\"https://reactjs.org/docs/react-dom-server.html#rendertostring\"><code class=\"language-text\">renderToString()</code></a> 和 <a href=\"https://reactjs.org/docs/react-dom-server.html#rendertostaticmarkup\"><code class=\"language-text\">renderToStaticMarkup()</code></a> 可以在浏览器和 node 环境中运行，<a href=\"https://reactjs.org/docs/react-dom-server.html#rendertonodestream\"><code class=\"language-text\">renderToNodeStream()</code></a> 和 <a href=\"https://reactjs.org/docs/react-dom-server.html#rendertostaticnodestream\"><code class=\"language-text\">renderToStaticNodeStream()</code></a> 由于使用了 node 中特有的 stream，所以不能在浏览器中运行。</p>\n<h3><code class=\"language-text\">renderToString</code> 执行原理</h3>\n<h4><code class=\"language-text\">renderToString</code> 作用</h4>\n<blockquote>\n<p>将 React 元素渲染为初始 HTML。React 将返回一个 HTML 字符串。你可以使用此方法在服务端生成 HTML，并在首次请求时将标记下发，以加快页面加载速度，并允许搜索引擎爬取你的页面以达到 SEO 优化的目的。</p>\n<p>如果你在已有服务端渲染标记的节点上调用 <a href=\"https://zh-hans.reactjs.org/docs/react-dom.html#hydrate\">ReactDOM.hydrate()</a> 方法，React 将会保留该节点且只进行事件处理绑定，从而让你有一个非常高性能的首次加载体验。</p>\n</blockquote>\n<h4><code class=\"language-text\">hydrate()</code> 作用</h4>\n<blockquote>\n<p>简单来讲这个方法是和 render() 的作用是相同的，只不过 <code class=\"language-text\">hydrate()</code> 在 <code class=\"language-text\">ReactDOMServer</code> 渲染的容器中对 HTML 的内容进行补水操作。React 会尝试在已有标记上绑定事件监听器。</p>\n</blockquote>\n<p><code class=\"language-text\">renderToString</code> 的实现：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">renderToString</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> renderer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReactPartialRenderer</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> markup <span class=\"token operator\">=</span> renderer<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token number\">Infinity</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> markup<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n    renderer<span class=\"token punctuation\">.</span><span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>该函数接收 react 组件参数并在内部实例化一个 <code class=\"language-text\">ReactPartialRenderer</code>，该渲染器调用 read 方法返回 string 类型的标记。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ReactDOMServerRenderer</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">children<span class=\"token punctuation\">:</span> mixed<span class=\"token punctuation\">,</span> makeStaticMarkup<span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> flatChildren <span class=\"token operator\">=</span> <span class=\"token function\">flattenTopLevelChildren</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> topFrame<span class=\"token punctuation\">:</span> Frame <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">type</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// Assume all trees start in the HTML namespace (not totally true, but</span>\n      <span class=\"token comment\">// this is what we did historically)</span>\n      domNamespace<span class=\"token punctuation\">:</span> Namespaces<span class=\"token punctuation\">.</span>html<span class=\"token punctuation\">,</span>\n      children<span class=\"token punctuation\">:</span> flatChildren<span class=\"token punctuation\">,</span>\n      childIndex<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n      context<span class=\"token punctuation\">:</span> emptyObject<span class=\"token punctuation\">,</span>\n      footer<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__DEV__<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>topFrame<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> FrameDev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>debugElementStack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>threadID <span class=\"token operator\">=</span> <span class=\"token function\">allocThreadID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>topFrame<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>exhausted <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentSelectValue <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>previousWasTextNode <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>makeStaticMarkup <span class=\"token operator\">=</span> makeStaticMarkup<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>suspenseDepth <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Context (new API)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>contextIndex <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>contextStack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>contextValueStack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__DEV__<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>contextProviderStack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">ReactPartialRenderer</code> 的构造函数初始化了一些属性，其中 this.stack 初始值为只有顶级 frame 的数组。</p>\n<p><code class=\"language-text\">renderer.read()</code> 是内部的核心逻辑，该方法中 while 循环条件比较输出的 out 字符串长度，并进一步调用 <code class=\"language-text\">render()</code> 方法返回的字符串追加到 out 中。由于在 read 中传入的参数为 <code class=\"language-text\">Infinity</code>，所以只有在 <code class=\"language-text\">this.stack.length === 0</code> 时才会 break 退出。</p>\n<p><code class=\"language-text\">render()</code> 方法内部根据了 child 节点类型是字符串、数字、react 组件分别执行对应的逻辑，如果 child 还有 child 节点，那么会被 push 到 this.stack 中，这样 <code class=\"language-text\">read()</code> 方法中的 while 循环就会继续解析该 child 的内容。</p>\n<p>这其中还有非常重要的一个函数是 <code class=\"language-text\">processChild(elementundefined Component)</code> element 即为 child 节点，Component 为 element 上的 type 属性，即为我们传入的类组件或函数组件。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">processChild</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element<span class=\"token punctuation\">,</span> Component</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> isClass <span class=\"token operator\">=</span> <span class=\"token function\">shouldConstruct</span><span class=\"token punctuation\">(</span>Component<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> publicContext <span class=\"token operator\">=</span> <span class=\"token function\">processContext</span><span class=\"token punctuation\">(</span>Component<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> threadID<span class=\"token punctuation\">,</span> isClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> queue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> replace <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> updater <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">isMounted</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">publicInstance</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">enqueueForceUpdate</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">publicInstance</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>queue <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">warnNoop</span><span class=\"token punctuation\">(</span>publicInstance<span class=\"token punctuation\">,</span> <span class=\"token string\">'forceUpdate'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">enqueueReplaceState</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">publicInstance<span class=\"token punctuation\">,</span> completeState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      replace <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      queue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>completeState<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">enqueueSetState</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">publicInstance<span class=\"token punctuation\">,</span> currentPartialState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>queue <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">warnNoop</span><span class=\"token punctuation\">(</span>publicInstance<span class=\"token punctuation\">,</span> <span class=\"token string\">'setState'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>currentPartialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> inst<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isClass<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    inst <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Component</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">,</span> publicContext<span class=\"token punctuation\">,</span> updater<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> Component<span class=\"token punctuation\">.</span>getDerivedStateFromProps <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> partialState <span class=\"token operator\">=</span> Component<span class=\"token punctuation\">.</span><span class=\"token function\">getDerivedStateFromProps</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n        element<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">,</span>\n        inst<span class=\"token punctuation\">.</span>state\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>partialState <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        inst<span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> inst<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">,</span> partialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> componentIdentity <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">prepareToUseHooks</span><span class=\"token punctuation\">(</span>componentIdentity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    inst <span class=\"token operator\">=</span> <span class=\"token function\">Component</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">,</span> publicContext<span class=\"token punctuation\">,</span> updater<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    inst <span class=\"token operator\">=</span> <span class=\"token function\">finishHooks</span><span class=\"token punctuation\">(</span>Component<span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">,</span> inst<span class=\"token punctuation\">,</span> publicContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// If the flag is on, everything is assumed to be a function component.</span>\n    <span class=\"token comment\">// Otherwise, we also do the unfortunate dynamic checks.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>disableModulePatternComponents <span class=\"token operator\">||</span> inst <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> inst<span class=\"token punctuation\">.</span>render <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      child <span class=\"token operator\">=</span> inst<span class=\"token punctuation\">;</span>\n      <span class=\"token function\">validateRenderResult</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> Component<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  inst<span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n  inst<span class=\"token punctuation\">.</span>context <span class=\"token operator\">=</span> publicContext<span class=\"token punctuation\">;</span>\n  inst<span class=\"token punctuation\">.</span>updater <span class=\"token operator\">=</span> updater<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> initialState <span class=\"token operator\">=</span> inst<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>initialState <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    inst<span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> initialState <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">typeof</span> inst<span class=\"token punctuation\">.</span>UNSAFE_componentWillMount <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span> <span class=\"token operator\">||</span>\n    <span class=\"token keyword\">typeof</span> inst<span class=\"token punctuation\">.</span>componentWillMount <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> inst<span class=\"token punctuation\">.</span>componentWillMount <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// In order to support react-lifecycles-compat polyfilled components,</span>\n      <span class=\"token comment\">// Unsafe lifecycles should not be invoked for any component with the new gDSFP.</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> Component<span class=\"token punctuation\">.</span>getDerivedStateFromProps <span class=\"token operator\">!==</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        inst<span class=\"token punctuation\">.</span><span class=\"token function\">componentWillMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">typeof</span> inst<span class=\"token punctuation\">.</span>UNSAFE_componentWillMount <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span> <span class=\"token operator\">&amp;&amp;</span>\n      <span class=\"token keyword\">typeof</span> Component<span class=\"token punctuation\">.</span>getDerivedStateFromProps <span class=\"token operator\">!==</span> <span class=\"token string\">'function'</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// In order to support react-lifecycles-compat polyfilled components,</span>\n      <span class=\"token comment\">// Unsafe lifecycles should not be invoked for any component with the new gDSFP.</span>\n      inst<span class=\"token punctuation\">.</span><span class=\"token function\">UNSAFE_componentWillMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> oldQueue <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> oldReplace <span class=\"token operator\">=</span> replace<span class=\"token punctuation\">;</span>\n      queue <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n      replace <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldReplace <span class=\"token operator\">&amp;&amp;</span> oldQueue<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        inst<span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> oldQueue<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> nextState <span class=\"token operator\">=</span> oldReplace <span class=\"token operator\">?</span> oldQueue<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> inst<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> dontMutate <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> oldReplace <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> oldQueue<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">const</span> partial <span class=\"token operator\">=</span> oldQueue<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">const</span> partialState <span class=\"token operator\">=</span>\n            <span class=\"token keyword\">typeof</span> partial <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span>\n              <span class=\"token operator\">?</span> <span class=\"token function\">partial</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>inst<span class=\"token punctuation\">,</span> nextState<span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">,</span> publicContext<span class=\"token punctuation\">)</span>\n              <span class=\"token punctuation\">:</span> partial<span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>partialState <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dontMutate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              dontMutate <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n              nextState <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> nextState<span class=\"token punctuation\">,</span> partialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n              Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>nextState<span class=\"token punctuation\">,</span> partialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        inst<span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> nextState<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      queue <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  child <span class=\"token operator\">=</span> inst<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">validateRenderResult</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> Component<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 这里为了兼容历史的 context</span>\n  <span class=\"token keyword\">let</span> childContext<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>disableLegacyContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> inst<span class=\"token punctuation\">.</span>getChildContext <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> childContextTypes <span class=\"token operator\">=</span> Component<span class=\"token punctuation\">.</span>childContextTypes<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> childContextTypes <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        childContext <span class=\"token operator\">=</span> inst<span class=\"token punctuation\">.</span><span class=\"token function\">getChildContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> contextKey <span class=\"token keyword\">in</span> childContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">invariant</span><span class=\"token punctuation\">(</span>\n            contextKey <span class=\"token keyword\">in</span> childContextTypes<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'%s.getChildContext(): key \"%s\" is not defined in childContextTypes.'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">getComponentName</span><span class=\"token punctuation\">(</span>Component<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token string\">'Unknown'</span><span class=\"token punctuation\">,</span>\n            contextKey\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>childContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        context <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> childContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> child<span class=\"token punctuation\">,</span> context <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里我们省略了 Dev 环境下的各种判断逻辑，其余部分首先判断了组件是类组件还是函数组件，然后对应执行 <code class=\"language-text\">new Component()</code> 或 <code class=\"language-text\">Component()</code> 来初始化组件实例，并对实例添加 props,state,updater 属性。在接下来根据组件是否声明了生命周期函数来进行相应的调用。最后调用实例上的 <code class=\"language-text\">render()</code> 方法赋值给 child 并返回。</p>\n<h3>总结</h3>\n<p>本文主要从 <code class=\"language-text\">renderToString</code> 入口来简单了解了一下 react 是如何根据传入的组件一步步渲染为标准的 html 字符串，可以直接在浏览器中渲染。那么给了我们一些启发，是不是我们可以有一个专门用来将 react 组件实时渲染为 html 的服务，然后将输出返回给调用方，这样我们甚至可以支持在线配置 react 组件并持久化下来支撑将来的业务需要。</p>","frontmatter":{"title":"入门 React DOM 服务端渲染","date":"April 17, 2020","description":"了解 React DOM 服务端渲染过程，以 renderToString 函数为例了解整个执行逻辑"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"tags":["React DOM","Server Render"],"slug":"/getting-started-react-dom-server-render/","previous":{"excerpt":"前言 最近笔者利用休息时间仿了一波微博热搜页面，简单来讲就是在服务端利用 cheerio 解析页面 html，提取热搜标题，并根据标题展开每个热搜的详细内容。  文字内容可以很简单的提取，但是热搜中出现的图片想要直接拿来显示并非易事。 遇到问题 图片的 src…","fields":{"slug":"/load-image-denied-solution/"},"frontmatter":{"date":"April 27, 2020","description":"本文从实际出发尝试提供一种绕过图片防盗链校验的小技巧","title":"如何绕过图片防盗链的校验","tags":["Express","Referer ACL"]}},"next":{"excerpt":"前言 之前曾有打算做一个富文本编辑器，最近花了一些时间开始开发，目前处于原型开发阶段。这其中遇到了一些棘手的问题，在此先记录一下。 初步构建 通过 CRA（create-react-app…","fields":{"slug":"/mini-editor/"},"frontmatter":{"date":"April 14, 2020","description":"手撸富文本编辑器遇到的问题及参考思路","title":"迷你富文本编辑器","tags":["Editor","draft.js"]}}}}}